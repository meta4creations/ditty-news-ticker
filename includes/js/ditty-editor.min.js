/* global dittyVars:true */
/* global jQuery:true */
// @codekit-append 'partials/class-ditty-ui-data-list.js';
// @codekit-append 'editor/helpers.js';
// @codekit-append 'editor/class-ditty-editor.js';
// @codekit-append 'editor/class-ditty-settings-panel.js';
// @codekit-append 'editor/class-ditty-items-panel.js';
// @codekit-append 'editor/class-ditty-item-types-panel.js';
// @codekit-append 'editor/class-ditty-item-editor-panel.js';
// @codekit-append 'editor/class-ditty-displays-panel.js';
// @codekit-append 'editor/class-ditty-display-editor-panel.js';
// @codekit-append 'editor/class-ditty-layout-variations-panel.js';
// @codekit-append 'editor/class-ditty-layouts-panel.js';
// @codekit-append 'editor/class-ditty-layout-html-editor-panel.js';
// @codekit-append 'editor/class-ditty-layout-css-editor-panel.js';
// @codekit-append 'editor/ditty-list-display-editor.js';
// @codekit-append 'editor/ditty-ticker-display-editor.js';
// @codekit-append 'editor/ditty-item-edit-editor.js';

jQuery( function( $ ) {
	
	// Setup strict mode
	(function() {

    "use strict";

		/**
		 * Close down editor display panels appropriately
		 *
		 * @since    3.0
		 * @return   null
		*/
		$( 'body' ).on( 'ditty_editor_before_panel_update', function( event, slideId, $slide, prevSlideId, $prevSlide, editor ) {
			
			// Disable any delayed Ditty updates
			editor.delayedSubmitDisable();
			
			// Setup protip
			$.protip({
				defaults: {
					position: 'top',
					size: 'small',
					scheme: 'black',
					classes: 'ditty-protip'
				}
			} );

			switch( slideId ) {
				case 'settings':
					if ( ! $slide.hasClass( 'init' ) ) {
						$slide.ditty_settings_panel( { editor: editor } );
					}
					break;
				case 'items':
					if ( $slide.hasClass( 'init' ) ) {
						$slide.ditty_items_panel( 'panelVisible' );
					} else {
						$slide.ditty_items_panel( { editor: editor } );
					}
					break;
				case 'displays':
					$slide.find( '.ditty-data-list__item' ).removeClass( 'editing' );
					if ( $slide.hasClass( 'init' ) ) {
						$slide.ditty_displays_panel( 'panelVisible' );
					} else {
						$slide.ditty_displays_panel( {
							editor: editor
						} );
					}
					break;
				case 'item_types':
					$slide.find( '.ditty-data-list__item' ).removeClass( 'editing' );
					if ( $slide.hasClass( 'init' ) ) {
						$slide.ditty_item_types_panel( 'panelVisible' );
					} else {
						$slide.ditty_item_types_panel( {
							editor: editor
						} );
					}
					break;
				case 'item_editor':
					$slide.ditty_item_editor_panel( { editor : editor } );
					break;
				case 'display_editor':
					$slide.ditty_display_editor_panel( { editor: editor } );
					break;
				case 'layouts':
					if ( ! ( 'layoutHtmlEditor' === prevSlideId || 'layoutCssEditor' === prevSlideId ) ) {
						$slide.ditty_layouts_panel( { editor : editor } );
					}
					break;
				case 'layout_variations':
					if ( $slide.hasClass( 'init' ) ) {
						$slide.ditty_layout_variations_panel( 'panelVisible' );
					} else {
						$slide.ditty_layout_variations_panel( { editor : editor } );
					}
					break;
				case 'layout_html_editor':
					$slide.ditty_layout_html_editor_panel( {
						editor 			: editor,
						prevPanel 	: prevSlideId
					} );
					break;
				case 'layout_css_editor':
					$slide.ditty_layout_css_editor_panel( {
						editor 			: editor,
						prevPanel 	: prevSlideId
					} );
					break;
				default:
					break;
			}
		} );

		/**
		 * Setup the editor display panel when ready
		 *
		 * @since    3.0
		 * @return   null
		*/
		$( 'body' ).on( 'ditty_editor_panel_removed', function( event, slideId, $slide ) {
			switch( slideId ) {
				case 'item_editor':
					if ( $slide.ditty_item_editor_panel ) {
						$slide.ditty_item_editor_panel( 'destroy' );
					}
					break;
				case 'display_editor':
					if ( $slide.ditty_display_editor_panel ) {
						$slide.ditty_display_editor_panel( 'destroy' );
					}
					break;
				case 'layouts':
					if ( $slide.ditty_layouts_panel ) {
						$slide.ditty_layouts_panel( 'destroy' );
					}
					break;
				case 'layout_variations':
					if ( $slide.ditty_layout_variations_panel ) {
						$slide.ditty_layout_variations_panel( 'destroy' );
					}	
					break;
				case 'layouts':
					if ( $slide.ditty_layouts_panel ) {
						$slide.ditty_layouts_panel( 'destroy' );
					}
					break;
				case 'layout_html_editor':
					if ( $slide.ditty_layout_html_editor_panel ) {
						$slide.ditty_layout_html_editor_panel( 'destroy' );
					}
					break;
				case 'layout_css_editor':
					if ( $slide.ditty_layout_css_editor_panel ) {
						$slide.ditty_layout_css_editor_panel( 'destroy' );
					}
					break;
				default:
					break;
			}	
		} );
		
	}() );
	
} );


/**
 * Initialize an editor
 *
 * @since    3.0
 * @return   null
*/
function dittyEditorInit( ditty ) {
	if ( ! ditty ) {
		return false;
	}
	var status = ditty.options( 'status' ),
			panel = 'auto-draft' === status ? 'settings' : false;
	
	jQuery( '#ditty-editor__settings' ).ditty_editor( {
		ditty: ditty,
		panel: panel
	} );
}
dittyEditorInit();

/**
 * UI - Data List
 *
 * @since		3.0
 * @return	null
*/

(function ($) {
  'use strict';

  var defaults = {
	  listType				: 'toggle',
	  showAll 				: true,
	  activeFilter		: '*',
	  filter					: '.ditty-data-list__filter',
	  filterSelector 	: 'filter',
	  item 						: '.ditty-data-list__item',
	  itemSelector 		: 'filter'
  };

  var Ditty_UI_Data_List = function ( elmt, options ) {
	  
    this.elmt         		= elmt;
    this.settings     		= $.extend( {}, defaults, $.ditty_ui_data_list.defaults, options );
    this.$elmt        		= $( elmt );
    this.filters        	= [];

    this._init();
  };


  Ditty_UI_Data_List.prototype = {

    /**
		 * Initialize the data list
		 *
		 * @since		3.0
		 * @return	null
		*/
    _init: function () {

      var self = this;
      
			this.$elmt.on( 'click', this.settings.filter, { self: this }, this._filterClick );
			this.$elmt.find( this.settings.filter + '.active' ).each( function() {
				self._filterList( $( this ).data( self.settings.filterSelector ) );
			});
			
			if ( '*' !== this.settings.activeFilter ) {
				this._filterList( this.settings.activeFilter );
			}

			// Trigger the init
      setTimeout( function () {
        self.trigger( 'init' ); 
      }, 1 );
    },
    
    
    /**
		 * Select the filter and update the list
		 *
		 * @since    3.0
		 * @return   null
		*/
    _filterList: function( filter ) {
	    
	    var self = this,
	    		filters = this.filters;

	    if ( 'toggle' === this.settings.listType ) {
		    
		    if ( this.filters.includes( filter ) ) {
			    if ( this.settings.showAll ) {
				    this.filters = [];
				    this.$elmt.find( this.settings.filter ).removeClass( 'active' );
				    this.$elmt.find( this.settings.item ).show();
			    }
			  } else {
			    this.filters = [ filter ];
			    this.$elmt.find( this.settings.filter ).removeClass( 'active' );
					this.$elmt.find( this.settings.filter + '[data-' + this.settings.filterSelector + '="' + filter + '"]' ).addClass( 'active' );
					this.$elmt.find( this.settings.item ).hide();
					this.$elmt.find( this.settings.item + '[data-' + this.settings.itemSelector + '="' + filter + '"]' ).show();
				}
		  } else if ( 'filter' === this.settings.listType ) {
			  
			  this.$elmt.find( this.settings.item ).hide();
			  
			  if ( this.filters.includes( filter ) ) {
			    this.$elmt.find( this.settings.filter + '[data-' + this.settings.filterSelector + '="' + filter + '"]' ).removeClass( 'active' );
					for( var i = 0; i < this.filters.length; i++ ) { 
					   if ( self.filters[i] === filter ) {
					     self.filters.splice( i, 1 ); 
					   }
					}
				} else {	
					this.$elmt.find( this.settings.filter + '[data-' + this.settings.filterSelector + '="' + filter + '"]' ).addClass( 'active' );
			    this.filters.push( filter );
				}

				// Show the filtered items
				$.each( this.filters, function( index, value ) {
				  self.$elmt.find( this.settings.item + '[data-' + this.settings.itemSelector + '="' + value + '"]' ).show();
				});
				
				// Show all if no filters
				if( 0 === this.filters.length ) {
					self.$elmt.find( this.settings.item ).show();
				}
		  }

		  if ( filters !== this.filters ) {
			  self.trigger( 'update' ); 
		  } 
	  },
    
    
    /**
		 * Filter click listener
		 *
		 * @since    3.0
		 * @return   null
		*/
    _filterClick: function( e ) {
	    e.preventDefault();
	    
	    var self = e.data.self,
	    		$link = $( e.target );
	    		
	    if ( ! $link.is( 'a' ) ) {
		    $link = $link.parents( 'a' );
	    }

	    self._filterList( $link.data( self.settings.filterSelector ) );
	  },
    

	  /**
		 * Return a specific setting
		 *
		 * @since    3.0
		 * @return   null
		*/
    _options: function ( key ) {
	    return this.settings[key];
    },
    		
		
		/**
		 * Setup triggers
		 *
		 * @since  	3.0
		 * @return 	null
		*/
    trigger: function ( fn, customParams ) {
	    var params = [ this.settings, this.filters ]; 
	    
	    if ( customParams ) {
		    params = customParams;
	    }

	    this.$elmt.trigger( 'ditty_ui_data_list_' + fn, params );
	
	    if ( typeof this.settings[fn] === 'function' ) {
	      this.settings[fn].apply( this.$elmt, params );
	    }
    },
		
		
		/**
		 * Allow settings to be modified
		 *
		 * @since  	3.0
		 * @return 	null
		*/
    options: function ( key, value ) {

	    if ( typeof key === 'object' ) {
	      this.settings = $.extend( {}, defaults, $.ditty_ui_data_list.defaults, key );
	    } else if ( typeof key === 'string' ) {
        if ( value === undefined ) {
	        return this.settings[key];
        }
        this.settings[key] = value;
	    } else {
        return this.settings;
	    }

	    this.trigger( 'options_update' );
    },
		
		
		/**
		 * Destroy the editor
		 *
		 * @since  	3.0
		 * @return 	null
		*/
    destroy: function () {
			
			this.$elmt.off( 'click', this.settings.filter, { self: this }, this._filterClick );
			
	    // Trigger a reset notice
	    this.trigger( 'destroy' ); 
	    this.elmt._ditty_ui_data_list = null;
    }
  };

	
	/**
	 * Create the data list
	 *
	 * @since  	3.0
	 * @return 	null
	*/
  $.fn.ditty_ui_data_list = function( options ) {
    var args = arguments,
        error = false,
        returns;

    if ( options === undefined || typeof options === 'object' ) {
      return this.each( function () {
        if ( ! this._ditty_ui_data_list ) {
        	this._ditty_ui_data_list = new Ditty_UI_Data_List( this, options );
        }
      });
    } else if ( typeof options === 'string' ) {
      this.each( function () {
        var instance = this._ditty_ui_data_list;

        if ( ! instance ) {
          throw new Error( 'No Ditty_UI_Data_List applied to this element.' );
        }
        if ( typeof instance[options] === 'function' && options[0] !== '_' ) {
          returns = instance[options].apply( instance, [].slice.call( args, 1 ) );
        } else {
          error = true;
        }
      } );

      if ( error ) {
        throw new Error( 'No method "' + options + '" in Ditty_UI_Data_List.' );
      }

      return returns !== undefined ? returns : this;
    }
  };

  $.ditty_ui_data_list = {};
  $.ditty_ui_data_list.defaults = defaults;

} )( jQuery );


/**
 * Reorder a set of items by id
 *
 * @since    3.0
 * @return   null
*/
function dittyGetItemsById( items, id ) {
	var idItems = [];
	jQuery.each( items, function( i, item ) {
		if ( String( item.id ) === String( id ) ) {
			idItems.push( item );
		}
	} );
	return idItems;
}

/**
 * Reorder a set of items
 *
 * @since    3.0
 * @return   null
*/
function dittyItemsReorder( items, ids ) {
	var orderedItems = [];
	jQuery.each( ids, function( index, id ) {
		orderedItems = jQuery.merge( orderedItems, dittyGetItemsById( items, id ) );
	} );
	return orderedItems;
}

/**
 * Ditty editor ajax request
 * @since    3.0
 * @return   null
*/
// function ditty_editor_ajax( data, elmt ) {
// 	var defaults = {
// 		action				: 'ditty_editor_ajax',
// 		draft_values 	: elmt.settings.editor.getDraftValues(),
// 		security			: dittyVars.security
// 	};
// 	var ajax_data = jQuery.extend( {}, defaults, data );
// 	jQuery.post( dittyVars.ajaxurl, ajax_data, function( response ) {
// 		if ( response.draft_values ) {
// 			elmt.settings.editor.updateDraftValues( false, response.draft_values );
// 		}
// 		if ( response.hook ) {
// 			elmt.$elmt.trigger( response.hook, [response] );
// 		}
// 	}, 'json' );
// }

/**
 * Update draft data
 * @since    3.0
 * @return   null
*/
function dittyDraftUpdate( elmt, type, key, value ) {
	var draftValues = elmt.settings.editor.getDraftValues( type );
	if ( ! draftValues ) {
		draftValues = {};
	}
	if ( key ) {
		draftValues[key] = value;
	} else {
		draftValues = value;
	}
	return elmt.settings.editor.updateDraftValues( type, draftValues );
}

/**
 * Get draft data
 * @since    3.0
 * @return   null
*/
function dittyDraftGet( elmt, type, key ) {
	var draftValues = elmt.settings.editor.getDraftValues( type );
	if ( ! draftValues ) {
		return false;
	}
	if ( key && draftValues[key] ) {
		return draftValues[key];
	} else {
		return draftValues;
	}
}

/**
 * Set a ditty element to delete
 *
 * @since    3.0
 * @return   null
*/
function dittyDraftDelete( type, elmt, el_id ) {
	var draftValues = elmt.settings.editor.getDraftValues( type ),
			updatedDraftValues = {};

	jQuery.each( draftValues, function( id, values ) { 
		if ( String( el_id ) !== String( id ) ) {
			updatedDraftValues[id] = values;
		}
	} );	
	if ( 'new-' !== String( el_id ).substring( 0, 4 ) ) {
		updatedDraftValues[el_id] = 'DELETE';
	}
	return elmt.settings.editor.updateDraftValues( type, updatedDraftValues );
}
function dittyDraftItemDelete( elmt, itemId ) {
	return dittyDraftDelete( 'items', elmt, itemId );
}
function dittyDraftLayoutDelete( elmt, layoutId ) {
	return dittyDraftDelete( 'layouts', elmt, layoutId );
}
function dittyDraftDisplayDelete( elmt, displayId ) {
	return dittyDraftDelete( 'displays', elmt, displayId );
}

/**
 * Update item draft data
 *
 * @since    3.0
 * @return   null
*/
function dittyDraftItemUpdateData( elmt, itemId, key, value ) {
	var itemDraftValues = elmt.settings.editor.getDraftValues( 'items' );
	if ( ! itemDraftValues ) {
		itemDraftValues = {};
	}
	if ( ! itemDraftValues[itemId] ) {
		itemDraftValues[itemId] = {};
	}
	if ( ! itemDraftValues[itemId].data ) {
		itemDraftValues[itemId].data = {};
	}
	if ( key ) {
		itemDraftValues[itemId].data[key] = value;
	} else {
		itemDraftValues[itemId].data = value;
	}
	return elmt.settings.editor.updateDraftValues( 'items', itemDraftValues );
}

/**
 * Get item draft data
 *
 * @since    3.0
 * @return   null
*/
function dittyDraftItemGetData( elmt, itemId, key ) {
	var itemDraftValues = elmt.settings.editor.getDraftValues( 'items' );
	if ( ! itemDraftValues[itemId] ) {
		return false;
	}
	if ( ! itemDraftValues[itemId].data ) {
		return false;
	}
	if ( key ) {
		if ( itemDraftValues[itemId].data[key] ) {
			return itemDraftValues[itemId].data[key];
		}
	} else {
		return itemDraftValues[itemId].data;
	}
}

/**
 * Update item draft meta
 *
 * @since    3.0
 * @return   null
*/
function dittyDraftItemUpdateMeta( elmt, itemId, key, value ) {
	var itemDraftValues = elmt.settings.editor.getDraftValues( 'items' );
	if ( ! itemDraftValues ) {
		itemDraftValues = {};
	}
	if ( ! itemDraftValues[itemId] ) {
		itemDraftValues[itemId] = {};
	}
	if ( ! itemDraftValues[itemId].meta ) {
		itemDraftValues[itemId].meta = {};
	}
	if ( key ) {
		itemDraftValues[itemId].meta[key] = value;
	} else {
		itemDraftValues[itemId].meta = value;
	}
	return elmt.settings.editor.updateDraftValues( 'items', itemDraftValues );
}

/**
 * Get item draft meta
 *
 * @since    3.0
 * @return   null
*/
function dittyDraftItemGetMeta( elmt, itemId, key ) {
	var itemDraftValues = elmt.settings.editor.getDraftValues( 'items' );
	if ( ! itemDraftValues[itemId] ) {
		return false;
	}
	if ( ! itemDraftValues[itemId].meta ) {
		return false;
	}
	if ( key ) {
		if ( itemDraftValues[itemId].meta[key] ) {
			return itemDraftValues[itemId].meta[key];
		}
	} else {
		return itemDraftValues[itemId].meta;
	}
}

/**
 * Update layout draft meta
 *
 * @since    3.0
 * @return   null
*/
function dittyDraftLayoutUpdate( elmt, layoutId, key, value ) {
	var layoutDraftValues = elmt.settings.editor.getDraftValues( 'layouts' );
	if ( ! layoutDraftValues ) {
		layoutDraftValues = {};
	}
	if ( ! layoutDraftValues[layoutId] ) {
		layoutDraftValues[layoutId] = {};
	}
	if ( key ) {
		layoutDraftValues[layoutId][key] = value;
	} else {
		layoutDraftValues[layoutId] = value;
	}
	return elmt.settings.editor.updateDraftValues( 'layouts', layoutDraftValues );
}

/**
 * Get layout draft meta
 *
 * @since    3.0
 * @return   null
*/
function dittyDraftLayoutGet( elmt, layoutId, key ) {
	var layoutDraftValues = elmt.settings.editor.getDraftValues( 'layouts' );
	if ( ! layoutDraftValues[layoutId] ) {
		return false;
	}
	if ( key ) {
		if ( layoutDraftValues[layoutId][key] ) {
			return layoutDraftValues[layoutId][key];
		}
	} else {
		return layoutDraftValues[layoutId];
	}
}

/**
 * Update display draft meta
 *
 * @since    3.0
 * @return   null
*/
function dittyDraftDisplayUpdate( elmt, displayId, key, value ) {
	var displayDraftValues = elmt.settings.editor.getDraftValues( 'displays' );
	if ( ! displayDraftValues ) {
		displayDraftValues = {};
	}
	if ( ! displayDraftValues[displayId] ) {
		displayDraftValues[displayId] = {};
	}
	if ( key ) {
		displayDraftValues[displayId][key] = value;
	} else {
		displayDraftValues[displayId] = value;
	}
	return elmt.settings.editor.updateDraftValues( 'displays', displayDraftValues );
}

/**
 * Get layout draft meta
 *
 * @since    3.0
 * @return   null
*/
function dittyDraftDisplayGet( elmt, displayId, key ) {
	var displayDraftValues = elmt.settings.editor.getDraftValues( 'layouts' );
	if ( ! displayDraftValues[displayId] ) {
		return false;
	}
	if ( key ) {
		if ( displayDraftValues[displayId][key] ) {
			return displayDraftValues[displayId][key];
		}
	} else {
		return displayDraftValues[displayId];
	}
}

/* global tinymce:true */

/**
 * Ditty Editor
 *
 * @since		3.0
 * @return	null
*/

(function ($) {
  'use strict';

  var defaults = {
	  screen	: 'admin',
	  ditty 	: null,
		panel		: ''
  };

  var Ditty_Editor = function( elmt, options ) {

    this.elmt         	= elmt;
    this.settings     	= $.extend( {}, defaults, $.ditty_editor.defaults, options );
    this.$elmt        	= $( elmt );
    this.ditty 					= this.settings.ditty;   
    this.dittyId				= this.settings.ditty.options( 'id' );
    this.dittyType 			= this.settings.ditty.options( 'type' );
    this.displayId			= 0;
    this.panelsLoaded		= 0;
    this.unsavedUpdates	= {};
		this.draftValues		= {};

    this.$overlay				= null;
    this.$contents			= null;
    this.$header				= null;
    this.$update				= null;
    this.$updateCount		= null;
		this.$updateLabel		= null;
    this.$tabs					= null;
    this.$panels				= null;
    this.currentTab			= 0;
    this.currentPanel		= this.settings.panel;
		this.delayedSubmit	= false;
    this.tabs						= [];
    this.panels					= [];
    this.activeItems		= [];

    this._init();
  };


  Ditty_Editor.prototype = {

    /**
		 * Initialize the editor
		 *
		 * @since		3.0
		 * @return	null
		*/
    _init: function () {
      var self = this,
      		$contents,
      		$header,
      		$updateCount,
					$updateLabel,
      		$update,
      		$tabs,
      		$panels;
      
      // Create the editor contents
      $contents = $( '<div class="ditty-editor__contents"></div>' );
      this.$contents = $contents;
      
      // Create the editor header
      $header = $( '<div class="ditty-editor__header"></div>' );
      this.$header = $header;
      
      // Create the editor update button count
      $updateCount = $( '<span class="ditty-editor__update__count"></span>' );
      this.$updateCount = $updateCount;
			
			// Create the editor update button label
			$updateLabel = $( '<span class="ditty-editor__update__label">Save Ditty</span>' );
			this.$updateLabel = $updateLabel;
      
      // Create the editor update button
      $update = $( '<button type="submit" class="ditty-editor__update ditty-button ditty-button--primary"></button>' );
      this.$update = $update;
      
      // Create the editor tabs
      $tabs = $( '<div class="ditty-editor__tabs"></div>' );
      this.$tabs = $tabs;
      
      // Create the editor panels
      $panels = $( '<div class="ditty-editor__panels"></div>' );
      this.$panels = $panels;
      
      // Add the new elements
      $update.prepend( $updateCount, $updateLabel );
      $header.append( $update );
      $contents.append( $header, $tabs, $panels );
      this.$elmt.append( $contents );
      
      this.$overlay = $( '<div class="ditty-updating-overlay ditty-admin-item__overlay"><div class="ditty-updating-overlay__inner"><i class="fas fa-sync-alt fa-spin"></i></div></div>' );
      this.$elmt.append( this.$overlay );
      
      // Setup action listeners
      $( document ).on( 'postbox-moved', { self: this }, this._postboxMoved );
			$( document ).on( 'postboxes-columnchange', { self: this }, this._postboxMoved );
			$( window ).on( 'beforeunload', { self: this }, this._beforeunload );
			this.ditty.$elmt.on( 'ditty_active_items_update', { self: this }, this._dittyItemsUpdated );
			this.ditty.$elmt.on( 'ditty_disabled_items_update', { self: this }, this._disabledItemsUpdate );
			this.$tabs.on( 'click', '.ditty-editor__tab', { self: this }, this._showPanel );
			this.$update.on( 'click', { self: this }, this._saveClick );
			this.$panels.on( 'ditty_slider_init', { self: this }, this._editorLoaded );
			this.$panels.on( 'ditty_slider_before_slide_update', { self: this }, this._beforeSlideUpdate );
			this.$panels.on( 'ditty_slider_after_slide_update', { self: this }, this._afterSlideUpdate );
			this.$panels.on( 'ditty_slider_slide_removed', { self: this }, this._slideRemoved );

			// Load the editor contents
      this._loadContents();
      
      // Stop live updates
      this.trigger( 'stop_live_updates' );
			
			// Trigger the init
      setTimeout( function() {
        self.trigger( 'init' ); 
      }, 1 );
    },


    /**
		 * Select the filter and update the list
		 *
		 * @since    3.0
		 * @return   null
		*/
    _loadContents: function() {

	    var self = this;
	    
	  	var data = {
				action		: 'ditty_editor_load_contents',
				ditty_id	: this.dittyId,
				security	: dittyVars.security
			};

			$.post( dittyVars.ajaxurl, data, function( response ) {
				self._initTabs( response.tabs );
				self._initPanels( response.panels );
				self._initSlider();
			}, 'json' );

	  },

	  /**
		 * Initialize the editor
		 *
		 * @since    3.0
		 * @return   null
		*/
		_editorLoaded: function ( e ) {
			var self = e.data.self;
			$( 'body' ).trigger( 'ditty_editor_loaded', [ self ] );
		},
		
		/**
		 * Get the editor update count
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _setUpdateCount: function() {
			// var total = 0;
			// $.each( this.unsavedUpdates, function( type, data ) {
			// 	total += data.length;
			// } ); 
			// 
			// if ( total > 0 ) {
			// 	this.$updateCount.text( total );
			// } else {
			// 	this.$updateCount.text( '' );
			// }
		},

	  /**
		 * Initialize the slider
		 *
		 * @since    3.0
		 * @return   null
		*/
		_initSlider: function () {
			var slideId = this.tabs[0].id;
			if ( this.currentPanel && '' !== this.currentPanel ) {
				slideId = this.currentPanel;
			}

			// Create a new slider and bind actions
      this.$panels.ditty_slider( {
	      transition			: 'fade',
	      transitionSpeed	: 0.75,
	      heightSpeed			: 0.75,
	      touchSwipe			: false,
	      slides					: this.panels,
	      slideId					: slideId
	    } );
		},
		
		/**
		 * Before slide update
		 *
		 * @since    3.0
		 * @return   null
		*/
		_beforeSlideUpdate: function ( e, index, slide, prevIndex, prevSlide ) {	
			var self = e.data.self;
			self.updateStart();
			self._updateTab( slide.id );
			$( 'body' ).trigger( 'ditty_editor_before_panel_update', [ slide.id, slide.$elmt, prevSlide.id, prevSlide.$elmt, self ] );
		},
		
		/**
		 * After slide update
		 *
		 * @since    3.0
		 * @return   null
		*/
		_afterSlideUpdate: function ( e, index, slide, prevIndex, prevSlide ) {	
			var self = e.data.self;
			self.updateStop();
			$( 'body' ).trigger( 'ditty_editor_after_panel_update', [ slide.id, slide.$elmt, prevSlide.id, prevSlide.$elmt, self ] );
		},
		
		/**
		 * Slide removed notice
		 *
		 * @since    3.0
		 * @return   null
		*/
		_slideRemoved: function ( e, slide ) {	
			var self = e.data.self;
			$( 'body' ).trigger( 'ditty_editor_panel_removed', [ slide.id, slide.$elmt, self ] );
		},

		/**
		 * Show a specific panel
		 *
		 * @since    3.0
		 * @return   null
		*/
		_showPanel: function ( e ) {
			e.preventDefault();
			var self 			= e.data.self,
					$tab 			= $( e.target ).is( 'a' ) ? $( e.target ) : $( e.target ).parent( 'a' ),
					panelId 	= $tab.data( 'panel' ),
					index			= parseInt( $tab.data( 'index' ) );
		  
		  if ( panelId === self.currentTab ) {
			  return false;
			}
			
			var transition = index > self.currentTab ? 'slideLeft' : 'slideRight';
		  self.$panels.ditty_slider( 'options', 'transition', transition );
		  self.$panels.ditty_slider( 'showSlideById', panelId );
		  self.currentTab = index;
		  self.$elmt.trigger( 'ditty_editor_add_drafts' );
		},

		/**
		 * Update the active tab
		 *
		 * @since    3.0
		 * @return   null
		*/
		_updateTab: function ( id ) {
			var $tab = $( '.ditty-editor__tab[data-panel="' + id + '"]' );
			if ( undefined !== $tab[0] ) {
				$( '.ditty-editor__tab' ).removeClass( 'active' );
				$tab.addClass( 'active' );
				this.currentTab = parseInt( $tab.data( 'index' ) );
			}
		},
	  
	  /**
		 * Initialize the editor tabs
		 *
		 * @since    3.0
		 * @return   null
		*/
    _initTabs: function ( tabs ) {
	    var self 	= this,
	    		index = 0;
	    $.each( tabs, function( key, value ) {
		    var $tab = $( '<a href="#" class="ditty-editor__tab ditty-editor__tab--' + key + '" data-panel="' + key + '" data-index="' + index + '"><i class="' + value.icon + '"></i><span>' + value.label + '</span></a>' );
		    self.$tabs.append( $tab );
		    self.tabs.push( {
			    id: key,
			    tab: $tab
		    } );
		    index++;
			} ); 
	  },
	  
	  /**
		 * Initialize the editor panels
		 *
		 * @since    3.0
		 * @return   null
		*/
    _initPanels: function ( panels ) {
	    var self = this;
	    $.each( panels, function( key, value ) {
		    var html = '<div class="ditty-editor__panel ditty-editor__panel--' + key + '">' + value + '</div>';		
		    self.panels.push( {
			    id		: key,
			    html	: html,
			    cache	: true
		    } );
			} ); 
	  },
		
		/**
		 * Initialize dynamic fields
		 *
		 * @since    3.0
		 * @return   null
		*/
    _initFields: function ( $fields ) {
	    $fields.find( '.ditty-data-list' ).ditty_ui_data_list();
			$fields.trigger( 'ditty_init_fields' );
			$.protip({
				defaults: {
					position: 'top',
					size: 'small',
					scheme: 'black',
					classes: 'ditty-protip'
				}
			});
	  },

	  /**
		 * Save the Ditty via ajax
		 *
		 * @since    3.0
		 * @return   null
		*/
	  saveDitty: function( args ) {
		  var self 					= this,
		  		dittyId 		= self.dittyId;
		  		
		  self.$updateLabel.text( 'Updating...' );
		  self.updateStart(); // Stop the update overlay

		  var data = {
        action				: 'ditty_editor_save',
        ditty_id 			: dittyId,
				draft_values	: self.draftValues,
				return_items 	: 1,
        security			: dittyVars.security
	    };
			data = $.extend( {}, data, args );

			$.post( dittyVars.ajaxurl, data, function( response ) {
				$( 'body' ).trigger( 'ditty_editor_save_ditty_response', [response] );

				// Update the items
				if ( response.display_items ) {
					self.ditty.options( 'items', response.display_items );
				}
				self.draftValues		= {};
				self.unsavedUpdates	= {};
				self._setUpdateCount();
				self.$elmt.removeClass( 'ditty-editor--updates-exist' );
				
				self.$updateLabel.text( 'Ditty Saved!' );
				setTimeout(function() {
					self.$updateLabel.text( 'Save Ditty' );
				}, 2000 );
				self.updateStop(); // Stop the update overlay
				
				if ( response.new_ditty_url ) {
					window.history.pushState( null, '', '/wp-admin/post.php?post=' + dittyId + '&action=edit' );
				}
			} );
    },
		_saveClick: function( e ) {
			e.preventDefault(); 
			var self = e.data.self;
			self.$elmt.trigger( 'ditty_editor_save_drafts' );
			if ( ! self.delayedSubmit ) {
				self.saveDitty();
			}
		},
	    
	  /**
		 * Close
		 *
		 * @since    3.0
		 * @return   null
		*/
/*
	  _close: function() {
	    //this.trigger( 'close' );
    },
*/
	  	  
	  /**
		 * Cancel click
		 *
		 * @since    3.0
		 * @return   null
		*/
/*
	  _cancel_click: function( e ) {
		  e.preventDefault();
		  var self = e.data.self;
	    self._close();
    },
*/
 
    /**
		 * Listen for updated items
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _dittyItemsUpdated: function( e, ditty, items ) {
			var self = e.data.self;
			self.activeItems = items;
			self.trigger( 'active_items_update' );
		},
		
		/**
     * Listen for updated disabled items
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _disabledItemsUpdate: function( e, items ) {
		  var self = e.data.self;
		  $.each( items, function( id, status ) {
			  if ( 'disabled' === status ) {
				  self.$elmt.find( '#ditty-editor-item--' + id ).addClass( 'ditty-editor-item--disabled' );
			  } else {
				  self.$elmt.find( '#ditty-editor-item--' + id ).removeClass( 'ditty-editor-item--disabled' );
			  }
			} );   
    },
    
		/**
		 * Postbox moved listener
		 *
		 * @since    3.0
		 * @return   null
		*/
		_postboxMoved: function ( e, item ) {
			if ( ! window.tinymce ) {
				return false;
			}

			$( item ).find( '.wp-editor-area' ).each( function() {
				var id = $( this ).attr( 'id' );
				tinymce.execCommand( 'mceRemoveEditor', true, id );
				tinymce.execCommand( 'mceAddEditor', true, id );
			} );
		},
		
		/**
		 * Warn users before leaving
		 *
		 * @since    3.0
		 * @return   null
		*/
		_beforeunload: function ( e  ) {
			var self = e.data.self;
			if ( Object.keys( self.unsavedUpdates ).length > 0 ) {
				return true;
			} else {
				return undefined;
			}
		},
      
    /**
		 * Window resize listener
		 *
		 * @since    3.0
		 * @return   null
		*/
    _windowResize: function( e ) {
	    e.preventDefault();
		  //var self = e.data.self;
		  //self._set_editor_padding();
	  },    

	  /**
		 * Return a specific setting
		 *
		 * @since    3.0
		 * @return   null
		*/
    _options: function ( key ) {
	    return this.settings[key];
    },
    
    /**
		 * Check if an update exists
		 *
		 * @since    3.0
		 * @return   null
		*/
    panelExists: function ( id ) {
	    var panels = this.$panels.ditty_slider( 'options', 'slides' ),
	    		exists = false;
	    
	    $.each( panels, function( index, panel ) {
		    if ( String( panel.id ) === String( id ) ) {
			    exists = true;
			    return;
		    }
		  } );
	    return exists;
	  },
	  
	  /**
		 * Check if an update exists
		 *
		 * @since    3.0
		 * @return   null
		*/
    showPanel: function ( id, html ) {
	    if ( html ) {
		    this.$panels.ditty_slider( 'addSlideById', id, html );
	    }
	    this.$panels.ditty_slider( 'showSlideById', id, true );
	  },
    
    /**
		 * Check if an update exists
		 *
		 * @since    3.0
		 * @return   null
		*/
    updateExists: function ( type, id ) {
	    if ( undefined === this.unsavedUpdates[type] ) {
		    this.unsavedUpdates[type] = [];
	    }
	    if ( -1 !== $.inArray( id, this.unsavedUpdates[type] ) ) {
		    return true;
	    }
	  },
    
    /**
		 * Let the user know there are unsaved updates
		 *
		 * @since    3.0
		 * @return   null
		*/
    addUpdate: function ( type, id ) {
	    var updated = false;
	    if ( undefined === this.unsavedUpdates[type] ) {
		    this.unsavedUpdates[type] = [];
	    }
	    if ( -1 === $.inArray( id, this.unsavedUpdates[type] ) ) {
		    updated = true;
		    this.unsavedUpdates[type].push( id );
	    }
	    this._setUpdateCount();
	    this.$elmt.addClass( 'ditty-editor--updates-exist' );
			//this.$updateLabel.text( 'Unsaved Updates' );

	    return updated;
	  },
	  
	   /**
		 * Remove an update notification
		 *
		 * @since    3.0
		 * @return   null
		*/
    removeUpdate: function ( type, id ) {
	    if ( undefined === this.unsavedUpdates[type] ) {
		    return false;
	    }
	    if ( -1 === $.inArray( id, this.unsavedUpdates[type] ) ) {
		    return false;
	    }
	    var removed = false,
	    		updatedType = [];
					
	    $.each( this.unsavedUpdates[type], function( index, type_id ) { 
		    if ( String( id ) === String( type_id ) ) {
			    removed = true;
			  } else {
			    updatedType.push( type_id ); 
		    }
		  } );
		  this.unsavedUpdates[type] = updatedType;
	    this._setUpdateCount();
	    if ( '' === this.$updateCount.text() ) {
		    this.$elmt.removeClass( 'ditty-editor--updates-exist' );
	    }
	    return removed; 
	  },
        
    /**
		 * Show the update overlay
		 *
		 * @since    3.0
		 * @return   null
		*/
    updateStart: function () {
	    this.$overlay.fadeIn();
	  },
	  
	  /**
		 * Hide the update overlay
		 *
		 * @since    3.0
		 * @return   null
		*/
    updateStop: function () {
	    this.$overlay.fadeOut();
	  },
    
    /**
		 * Initialize dynamic fields
		 *
		 * @since    3.0
		 * @return   null
		*/
    initFields: function ( $fields ) {
	    this._initFields( $fields );
	  },
		
		/**
		 * Add draft values
		 *
		 * @since    3.0
		 * @return   null
		*/
		updateDraftValues: function ( key, value ) {
			this.$elmt.addClass( 'ditty-editor--updates-exist' );
			if ( key ) {
				this.draftValues[key] = value;
				if ( 'development' === dittyVars.mode && window.console ) {
					console.log( 'draftValues:', this.draftValues );
				}
				return this.draftValues[key];
			} else {
				this.draftValues = value;
				if ( 'development' === dittyVars.mode && window.console ) {
					console.log( 'draftValues:', this.draftValues );
				}
				return this.draftValues;
			}
			
		},
		
		/**
		 * Get draft values
		 *
		 * @since    3.0
		 * @return   null
		*/
		getDraftValues: function ( key ) {
			if ( key ) {
				if ( this.draftValues[key] ) {
					return this.draftValues[key];
				} else {
					return false;
				}
			} else {
				return this.draftValues;
			}
		},
		
		/**
		 * Enable/disable delayed submit
		 *
		 * @since    3.0
		 * @return   null
		*/
		delayedSubmitEnable: function () {
			this.delayedSubmit = true;
		},
		delayedSubmitDisable: function () {
			this.delayedSubmit = false;
		},
		
		/**
		 * Setup triggers
		 *
		 * @since  	3.0
		 * @return 	null
		*/
    trigger: function ( fn, customParams ) { 
	    var params = [];
	    
	    switch( fn ) {
		    case 'active_items_update':
		    	params = [this.ditty, this.activeItems];
		    	break;
		    case 'stop_live_updates':
		    	params = [this.dittyId];
		    	break;
		    default:
		    	params = [this.settings];
		    	break;
	    }
	    
	    if ( customParams ) {
		    params = customParams;
	    }

	    this.$elmt.trigger( 'ditty_editor_' + fn, params );
	    if ( typeof this.settings[fn] === 'function' ) {
	      this.settings[fn].apply( this.$elmt, params );
	    }
	    $( 'body' ).trigger( 'ditty_' + fn, params );
    },	
		
		/**
		 * Allow settings to be modified
		 *
		 * @since  	3.0
		 * @return 	null
		*/
/*
    options: function ( key, value ) {

	    if ( typeof key === 'object' ) {
	      this.settings = $.extend( {}, defaults, $.ditty_editor.defaults, key );
	    } else if ( typeof key === 'string' ) {
        if ( value === undefined ) {
	        return this.settings[key];
        }
        this.settings[key] = value;
	    } else {
        return this.settings;
	    }

	    this.trigger( 'options_update' );
    },	
*/	

		/**
		 * Return option data for the object
		 *
		 * @since    3.0
		 * @return   value
		*/
    _getPanelOption: function( key ) {
	    switch( key ) {
		    case 'elmnt':
		    	return this.$panels;
				default:
					return this.settings[key];
	    }
    },
    
    /**
		 * Set options data for the object
		 *
		 * @since    3.0
		 * @return   null
		*/
    _setPanelOption: function( key, value ) { 
			if ( undefined === value ) {
				return false; 
			}
			this.$panels.ditty_slider( 'options', key, value );
	    this.trigger( 'update' );
    },
    
    /**
		 * Hook to get or set editor options
		 *
		 * @since    3.0
		 * @return   null
		*/
    panelOptions: function ( key, value ) {
	    var self = this;
	    if ( typeof key === 'object' ) {   
		    $.each( key, function( k, v ) {
			    self._setPanelOption( k, v );
				} );  
	    } else if ( typeof key === 'string' ) {
        if ( value === undefined ) {
	        return self._getPanelOption( key );
        }
        self._setPanelOption( key, value );
	    } else {
        return self.$panels.ditty_slider( 'options' );
	    }
    },

		/**
		 * Return option data for the object
		 *
		 * @since    3.0
		 * @return   value
		*/
    _getOption: function( key ) {
	    switch( key ) {
		    case 'elmnt':
		    	return this;
				default:
					return this.settings[key];
	    }
    },
    
    /**
		 * Set options data for the object
		 *
		 * @since    3.0
		 * @return   null
		*/
    _setOption: function( key, value ) { 
			if ( undefined === value ) {
				return false; 
			}
	    this.settings[key] = value;
	    this.trigger( 'update' );
    },
    
    /**
		 * Hook to get or set editor options
		 *
		 * @since    3.0
		 * @return   null
		*/
    options: function ( key, value ) {
	    var self = this;
	    if ( typeof key === 'object' ) {   
		    $.each( key, function( k, v ) {
			    self._setOption( k, v );
				} );  
	    } else if ( typeof key === 'string' ) {
        if ( value === undefined ) {
	        return self._getOption( key );
        }
        self._setOption( key, value );
	    } else {
        return self.settings;
	    }
    },
		
		/**
		 * Destroy the editor
		 *
		 * @since  	3.0
		 * @return 	null
		*/
    destroy: function () {
	    if ( this.$panels.ditty_slider ) {
	      this.$panels.ditty_slider( 'destroy' );
      }
      
      $( document ).off( 'postbox-moved', { self: this }, this._postboxMoved );
			$( document ).off( 'postboxes-columnchange', { self: this }, this._postboxMoved );
			$( window ).off( 'beforeunload', { self: this }, this._beforeunload );
			this.ditty.$elmt.off( 'ditty_active_items_update', { self: this }, this._dittyItemsUpdated );
			this.ditty.$elmt.off( 'ditty_disabled_items_update', { self: this }, this._disabledItemsUpdate );
			this.$tabs.off( 'click', 'ditty-editor__tab', { self: this }, this._showPanel );
			this.$update.off( 'click', { self: this }, this._saveClick );
			this.$panels.off( 'ditty_slider_init', { self: this }, this._editorLoaded );
			this.$panels.off( 'ditty_slider_before_slide_update', { self: this }, this._beforeSlideUpdate );
			this.$panels.off( 'ditty_slider_after_slide_update', { self: this }, this._afterSlideUpdate );
			this.$panels.off( 'ditty_slider_slide_removed', { self: this }, this._slideRemoved );

      this.trigger( 'destroy' );
      this.elmt._ditty_editor = null;
    }
  };
	
	/**
	 * Create the data list
	 *
	 * @since  	3.0
	 * @return 	null
	*/
  $.fn.ditty_editor = function( options ) {
    var args = arguments,
        error = false,
        returns;

    if ( options === undefined || typeof options === 'object' ) {
      return this.each( function () {
        if ( ! this._ditty_editor ) {
        	this._ditty_editor = new Ditty_Editor( this, options );
        }
      });
    } else if ( typeof options === 'string' ) {
      this.each( function () {
        var instance = this._ditty_editor;

        if ( ! instance ) {
          throw new Error( 'No Ditty_Editor applied to this element.' );
        }
        if ( typeof instance[options] === 'function' && options[0] !== '_' ) {
          returns = instance[options].apply( instance, [].slice.call( args, 1 ) );
        } else {
          error = true;
        }
      } );

      if ( error ) {
        throw new Error( 'No method "' + options + '" in Ditty_Editor.' );
      }

      return returns !== undefined ? returns : this;
    }
  };

  $.ditty_editor = {};
  $.ditty_editor.defaults = defaults;

} )( jQuery );


/**
 * Ditty Editor Settings Panel
 *
 * @since		3.0
 * @return	null
*/

(function ($) {
  'use strict';

  var defaults = {
	  editor: null
  };

  var Ditty_Settings_Panel = function ( elmt, options ) {
    this.elmt         					= elmt;
    this.settings     					= $.extend( {}, defaults, $.ditty_settings_panel.defaults, options );
    this.$elmt        					= $( elmt );
		this.$form									= this.$elmt.find( '.ditty-editor-options' );
		this.$title									= this.$elmt.find( 'input[name="title]' );
		this.$previewBg							= this.$elmt.find( 'input[name="previewBg"]' );
		this.$previewPaddingTop			= this.$elmt.find( 'input[name="previewPadding[paddingTop]"]' );
		this.$previewPaddingBottom	= this.$elmt.find( 'input[name="previewPadding[paddingBottom]"]' );
		this.$previewPaddingLeft		= this.$elmt.find( 'input[name="previewPadding[paddingLeft]"]' );
		this.$previewPaddingRight		= this.$elmt.find( 'input[name="previewPadding[paddingRight]"]' );
		this.$postTitle							= $( '.ditty-post__title' );
		this.$editorPreview					= $( '#ditty-editor__preview' );
		this.dittyId								= this.$form.data( 'ditty_id' );
		this.initData								= null;
		this.afterUpdateAction			= '';	

    this._init();
  };


  Ditty_Settings_Panel.prototype = {

    /**
		 * Initialize the panel
		 *
		 * @since		3.0
		 * @return	null
		*/
    _init: function () {
			
			// Save the initial data
			this.initData = this.$form.serialize();
			
			// Initialize dynamic fields
			this.settings.editor.initFields( this.$elmt );
			
			// Add actions
			this.settings.editor.$elmt.on( 'ditty_editor_add_drafts', { self: this }, this._addDrafts );
			this.settings.editor.$elmt.on( 'ditty_editor_save_drafts', { self: this }, this._saveDrafts );
			this.$form.on( 'submit', { self: this }, this._submitForm );
			this.$form.on( 'keyup change', 'input[type="text"], input[type="number"], textarea, select', { self: this }, this._checkUpdates );
			this.$form.on( 'click', 'input[type="radio"], input[type="checkbox"]', { self: this }, this._checkUpdates );
			this.$form.on( 'ditty_input_wysiwyg_update', '.ditty-input--wysiwyg', { self: this }, this._checkUpdates );
			this.$form.on( 'keyup change', 'input[name="title"]', { self: this }, this._titleChange );
			this.$form.on( 'keyup change', '.ditty-field--preview_settings *', { self: this }, this._previewBgChange );
			
	    this.$elmt.addClass( 'init' );
    },
		
		/**
		 * Check for updates
		 *
		 * @since    3.0
		 * @return   null
		*/
		_checkUpdates: function( e ) {
			var self = e ? e.data.self : this;
			var currentData = self.$form.serialize();
			if ( currentData !== self.initData ) {
				self.settings.editor.addUpdate( 'settings', self.itemId );
				self.settings.editor.delayedSubmitEnable(); // Enable the delayed submit since we have changes
			}	else {
				self.settings.editor.removeUpdate( 'settings', self.itemId );
			}
		},
		
		/**
		 * Listen for title changes
		 *
		 * @since    3.0
		 * @return   null
		*/
		_titleChange: function( e ) {
			var self = e ? e.data.self : this;
			var title = $( e.target ).val();
			self.$postTitle.text( title );
		},
		
		/**
		 * Listen for the preview background change
		 *
		 * @since    3.0
		 * @return   null
		*/
		_previewBgChange: function( e ) {
			var self = e ? e.data.self : this;
			var preview_css = {
				backgroundColor	: self.$previewBg.val(),
				paddingTop			: self.$previewPaddingTop.val(),
				paddingBottom		: self.$previewPaddingBottom.val(),
				paddingLeft			: self.$previewPaddingLeft.val(),
				paddingRight		: self.$previewPaddingRight.val()
			};
			self.$editorPreview.css( preview_css );
		},
		
		/**
		 * Editor updated listener
		 *
		 * @since    3.0
		 * @return   null
		*/
		_addDrafts: function( e ) {
			var self = e.data.self,
					currentData = self.$form.serialize();

			if ( currentData !== self.initData ) {
				self.$form.trigger( 'submit' );
			}	
		},
		
		/**
		 * Editor updated listener
		 *
		 * @since    3.0
		 * @return   null
		*/
		_saveDrafts: function( e ) {
			var self = e.data.self,
					currentData = self.$form.serialize();

			if ( currentData !== self.initData ) {
				self.afterUpdateAction = 'save';
				self.$form.trigger( 'submit' );
			}	
		},
		
		/**
		 * Submit updates
		 *
		 * @since    3.0
		 * @return   null
		*/
		_submitForm: function( e ) {
			e.preventDefault(); 
			var self 		= e.data.self,
					dittyId = self.dittyId;
			
			self.settings.editor.updateStart(); // Start the update overlay
			
			var data = {
				action				: 'ditty_editor_settings_update',
				ditty_id 			: dittyId,
				draft_values 	: self.settings.editor.getDraftValues(),
				security			: dittyVars.security
			};
			self.$form.ajaxSubmit( {
				url				: dittyVars.ajaxurl,
				type			: 'post',
				dataType	: 'json',
				data			: data,
				success		: function( response ) { 
					self.initData = self.$form.serialize();
					dittyDraftUpdate( self, 'settings', false, response );	
					self.settings.editor.delayedSubmitDisable(); // Remove the delayed submit since we just submitted
					if ( 'save' === self.afterUpdateAction ) { // Update the ticker
						self.settings.editor.saveDitty( { return_items: 0 } );
					}
					self.afterUpdateAction = '';
				}
			} ); 
		},

	  /**
		 * Return a specific setting
		 *
		 * @since    3.0
		 * @return   null
		*/
    _options: function ( key ) {
	    return this.settings[key];
    },
    
		/**
		 * Setup triggers
		 *
		 * @since  	3.0
		 * @return 	null
		*/
    trigger: function ( fn, customParams ) {
	    var params = [this.settings]; 
	    
	    if ( customParams ) {
		    params = customParams;
	    }

	    this.$elmt.trigger( 'ditty_settings_panel_' + fn, params );
	
	    if ( typeof this.settings[fn] === 'function' ) {
	      this.settings[fn].apply( this.$elmt, params );
	    }
    },

		/**
		 * Allow settings to be modified
		 *
		 * @since  	3.0
		 * @return 	null
		*/
    options: function ( key, value ) {

	    if ( typeof key === 'object' ) {
	      this.settings = $.extend( {}, defaults, $.ditty_settings_panel.defaults, key );
	    } else if ( typeof key === 'string' ) {
        if ( value === undefined ) {
	        return this.settings[key];
        }
        this.settings[key] = value;
	    } else {
        return this.settings;
	    }

	    this.trigger( 'options_update' );
    },

		/**
		 * Destroy the editor
		 *
		 * @since  	3.0
		 * @return 	null
		*/
    destroy: function () {

	    // Remove the init class
	    this.$elmt.removeClass( 'init' );
	    
	    // Remove actions
			this.settings.editor.$elmt.off( 'ditty_editor_save_drafts', { self: this }, this._saveDrafts );
			this.settings.editor.$elmt.off( 'ditty_editor_add_drafts', { self: this }, this._addDrafts );
			this.$form.off( 'submit', { self: this }, this._submitForm );
			this.$form.off( 'keyup change', 'input[type="text"], input[type="number"], textarea, select', { self: this }, this._checkUpdates );
			this.$form.off( 'keyup change', 'input[name="previewBg"]', { self: this }, this._previewBg_cahnge );
			this.$form.off( 'keyup change', 'input[name="title"]', { self: this }, this._titleChange );
			this.$form.off( 'click', 'input[type="radio"], input[type="checkbox"]', { self: this }, this._checkUpdates );
			this.$form.off( 'ditty_input_wysiwyg_update', '.ditty-input--wysiwyg', { self: this }, this._checkUpdates );
	    
	    this.trigger( 'destroy' );
	    this.elmt._ditty_settings_panel = null;
    }
  };

	/**
	 * Create the data list
	 *
	 * @since  	3.0
	 * @return 	null
	*/
  $.fn.ditty_settings_panel = function( options ) {
    var args = arguments,
        error = false,
        returns;

    if ( options === undefined || typeof options === 'object' ) {
      return this.each( function () {
        if ( ! this._ditty_settings_panel ) {
        	this._ditty_settings_panel = new Ditty_Settings_Panel( this, options );
        }
      });
    } else if ( typeof options === 'string' ) {
      this.each( function () {
        var instance = this._ditty_settings_panel;

        if ( ! instance ) {
          throw new Error( 'No Ditty_Settings_Panel applied to this element.' );
        }
        if ( typeof instance[options] === 'function' && options[0] !== '_' ) {
          returns = instance[options].apply( instance, [].slice.call( args, 1 ) );
        } else {
          error = true;
        }
      } );

      if ( error ) {
        throw new Error( 'No method "' + options + '" in Ditty_Settings_Panel.' );
      }

      return returns !== undefined ? returns : this;
    }
  };

  $.ditty_settings_panel = {};
  $.ditty_settings_panel.defaults = defaults;

} )( jQuery );


/**
 * Ditty Editor Items Panel
 *
 * @since		3.0
 * @return	null
*/

(function ($) {
  'use strict';

  var defaults = {
	  editor: null
  };

  var Ditty_Items_Panel = function ( elmt, options ) {
    this.elmt         = elmt;
    this.settings     = $.extend( {}, defaults, $.ditty_items_panel.defaults, options );
    this.$elmt        = $( elmt );
    this.$add       	= $( elmt ).find( '.ditty-editor-options__add' );
    this.$contents    = $( elmt ).find( '.ditty-editor__panel__contents' );
    this.$list				= $( elmt ).find( '.ditty-data-list' );
    this.$listItems		= $( elmt ).find( '.ditty-data-list__items' );
		this.isEmptyTicker	= false;

    this._init();
  };


  Ditty_Items_Panel.prototype = {

    /**
		 * Initialize the panel
		 *
		 * @since		3.0.12
		 * @return	null
		*/
    _init: function () {
	    this.$elmt.addClass( 'init' );

			// Add actions
			this.settings.editor.$elmt.on( 'ditty_editor_active_items_update', { self: this }, this._dittyActiveItemsUpdated );
	    this.$add.on( 'click', { self: this }, this._add_item );
			this.$elmt.on( 'click', '.ditty-data-list__item', { self: this }, this._showItem );
			this.$elmt.on( 'click', '.ditty-data-list__item__icon', { self: this }, this._editType );
			this.$elmt.on( 'click', '.ditty-data-list__item__edit', { self: this }, this._editItem );
			this.$elmt.on( 'click', '.ditty-data-list__item__layout', { self: this }, this._editLayoutVariations );
			this.$elmt.on( 'click', '.ditty-data-list__item__clone', { self: this }, this._cloneItem );
			this.$elmt.on( 'click', '.ditty-data-list__item__delete', { self: this }, this._deleteItem );
			this.$list.on( 'click', '.ditty-editor-item > a', { self: this }, this._actionClick );
			$( 'body' ).on( 'ditty_editor_save_ditty_response', { self: this }, this._dittyEditorSaveResponse );

			// Make sure there is at least one item
			if ( 1 > this.$elmt.find( '.ditty-data-list__item' ).length ) {
				this.isEmptyTicker = true;
				this.$add.trigger( 'click' );
			}
			
			// Initialize list sorting
			this._initializeSorting();
			
			// Highlight the current items
			this._highlightListItems( this.settings.editor.activeItems );
    },
		
		/**
		 * Update new layout ids on save
		 *
		 * @since    3.0
		 * @return   null
		*/
		dittyUpdateSavedDraftLayouts: function( draftId, newID ) {
			$.each( $( '.ditty-editor-item' ), function() {
				var layoutValue = $( this ).data( 'layout_value' );
				$.each( layoutValue, function( type, id ) {
					if ( String( id ) === String( draftId ) ) {
						layoutValue[type] = String( newID );
					}
				} );
				$( this ).attr( 'data-layout_value', layoutValue ).data( 'layout_value', layoutValue );
			} );
		},

		/**
		 * Update new item ids on save
		 *
		 * @since    3.0
		 * @return   null
		*/
		_dittyEditorSaveResponse: function( e, response ) {
			var self = e.data.self;
			if ( response.ditty_new_item_ids ) {
				$.each( response.ditty_new_item_ids, function( draftId, newId ) {
					var $editorItem = $( '#ditty-editor-item--' + draftId );
					if ( $editorItem.length ) {
						$editorItem.attr( 'id', 'ditty-editor-item--' + newId );
						$editorItem.attr( 'data-item_id', newId ).data( 'item_id', newId );
					}
				} );
			}
			if ( response.ditty_new_layout_ids ) {
				$.each( response.ditty_new_layout_ids, function( draftId, newID ) {
					self.dittyUpdateSavedDraftLayouts( draftId, newID );
				} );
			}
		},

		/**
		 * Highlight a list item
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _highlightListItem: function( item ) { 
		  var itemId = item.id + '';
	    itemId = itemId.split( '_' );
			this.$elmt.find( '#ditty-editor-item--' + itemId[0] ).addClass( 'active' );
		},

		/**
		 * Loop through the active items and highlight
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _highlightListItems: function( items ) {
		  this.$elmt.find( '.ditty-data-list__item' ).removeClass( 'active' );
		  var self = this; 
		  if ( Array.isArray( items ) ) {
			  $.each( items, function( i, item ) {
				  self._highlightListItem( item );
				});
		  } else {
			  self._highlightListItem( items );
		  }
		},

		/**
		 * Update the highlighted items when active
		 *
		 * @since    3.0
		 * @return   null
		*/
		_dittyActiveItemsUpdated: function( e, ditty, items ) {
	    var self = e.data.self;
			self._highlightListItems( items );
    },
    
    /**
		 * Initialize item sorting
		 *
		 * @since    3.0
		 * @return   null
		*/
    _initializeSorting: function() {
	    var self = this;   
	    this.$listItems.sortable( {
				handle: '.ditty-data-list__item__move',
				items: '.ditty-data-list__item',
				axis: 'y',
				start: function( event, ui ) {
					var $item = $( ui.item );
					$item.addClass( 'ditty-data-list__item--moving' );
				},
				stop: function( event, ui ) {
					var $item = $( ui.item );
					$item.removeClass( 'ditty-data-list__item--moving' );
					self.settings.editor.addUpdate( 'item_order', self.settings.editor.dittyId ); // Add to the update queue
				},
				update: function() {
					self._updateItemIndexes( 'updateDitty' );
				}
			} );
    },
    
    /**
		 * Show a specific item
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _showItem: function( e ) { 
		  e.preventDefault();
		  var self = e.data.self;
		  if ( ! $( e.target ).is( 'a' ) && ! $( e.target ).parent().is( 'a' ) ) {
				var $item 	= $( e.target ).is( '.ditty-data-list__item' ) ? $( e.target ) : $( e.target ).parents( '.ditty-data-list__item' ),
						itemId 	= $item.data( 'item_id' );
	
				// Update the display element
				self.settings.editor.ditty.showItem( itemId );
			}
    },
		
		/**
		 * Trigger an actions when a button is clicked
		 *
		 * @since    3.0
		 * @return   null
		*/
		_actionClick: function( e ) { 
			e.preventDefault();
			var self 			= e.data.self,
					$button 	= $( e.target ).is( 'a' ) ? $( e.target ) : $( e.target ).parent( 'a' ),
					$item 		= $button.parents( '.ditty-data-list__item' ),
					dittyId 	= $item.data( 'ditty_id' ),
					itemId 		= $item.data( 'item_id' );
					
			dittyVars.editor.currentItem = $item; // Set the current item

			$( 'body' ).trigger( 'ditty_editor_item_action_click', [$button, $item, itemId, dittyId, self.settings.editor] );
		},

    /**
		 * Edit a item type
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _editType: function( e ) { 
		  e.preventDefault();
		  var self = e.data.self;
		  
		  var $button = $( e.target ).is( 'a' ) ? $( e.target ) : $( e.target ).parent( 'a' ),
					$item 	= $button.parents( '.ditty-data-list__item' );

			$item.trigger( 'click' );
			$item.addClass( 'editing' );
			self.settings.editor.updateStart(); // Start the update overlay
			self.settings.editor.panelOptions( 'transition', 'slideRight' );
			self.settings.editor.showPanel( 'item_types' );
		},
		
		/**
		 * Edit a item
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _editItem: function( e ) { 
		  e.preventDefault();
		  var self = e.data.self;
		  
		  var $button = $( e.target ).is( 'a' ) ? $( e.target ) : $( e.target ).parent( 'a' ),
					$item 	= $button.parents( '.ditty-data-list__item' ),
					itemId 	= $item.data( 'item_id' );

			$item.trigger( 'click' );
			$item.addClass( 'editing' );
			self.settings.editor.updateStart(); // Start the update overlay
			
			// var data = {
			// 	hook		: 'ditty_editorItem_fields',
			// 	itemId	: itemId,
			// };
			// ditty_editor_ajax( data, self );
			
			// Load the item fields		
			var data = {
				action				: 'ditty_editor_item_fields',
				item_id				: itemId,
				draft_values 	: self.settings.editor.getDraftValues(),
				security			: dittyVars.security
			};
			$.post( dittyVars.ajaxurl, data, function( response ) {
				if ( response ) {
					var html = '<div class="ditty-editor__panel ditty-editor__panel--item_editor">' + response + '</div>';
					self.settings.editor.panelOptions( 'transition', 'slideLeft' );
					self.settings.editor.showPanel( 'item_editor', html );
				}
			} );
		},
		
		// _ditty_editorItem_fields: function( e, data ) {
		// 	var self = e.data.self;
		// 	if ( data.html ) {
		// 		var html = '<div class="ditty-editor__panel ditty-editor__panel--item_editor">' + data.html + '</div>';
		// 		self.settings.editor.panelOptions( 'transition', 'slideLeft' );
		// 		self.settings.editor.showPanel( 'item_editor', html );
		// 	}
		// },
		
		/**
		 * Edit a item layout variation
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _editLayoutVariations: function( e ) { 
		  e.preventDefault();
		  var self = e.data.self;
		  
		  var $button 			= $( e.target ).is( 'a' ) ? $( e.target ) : $( e.target ).parent( 'a' ),
					$item 				= $button.parents( '.ditty-data-list__item' ),
					itemType 			= $item.data( 'item_type' ),
					layoutValue 	= $item.data( 'layout_value' ),
					itemLabel 		= $item.find( '.ditty-data-list__item__label' ).html();

			$item.trigger( 'click' );
			$item.addClass( 'editing' );
			self.settings.editor.updateStart(); // Start the update overlay

			// Load the item fields		
			var data = {
				action				: 'ditty_editor_layout_variations',
				ditty_id			: self.settings.editor.dittyId,
				item_type			: itemType,
				item_label		: itemLabel,
				layout_value	: layoutValue,
				draft_values 	: self.settings.editor.getDraftValues(),
				security			: dittyVars.security
			};
			$.post( dittyVars.ajaxurl, data, function( response ) {
				if ( response ) {
					var html = '<div class="ditty-editor__panel ditty-editor__panel--layout-variations">' + response + '</div>';
					self.settings.editor.panelOptions( 'transition', 'slideLeft' );
					self.settings.editor.showPanel( 'layout_variations', html );
				}
			} );
		},

		/**
		 * Add a new item
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _add_item: function( e ) { 
		  e.preventDefault();
		  var self 				= e.data.self,
					dittyId 	= self.settings.editor.dittyId;

			//self.settings.editor.updateStart(); // Start the update overlay
			
			// Load the new display fields		
			var data = {
				action				: 'ditty_editor_item_add',
				ditty_id			: dittyId,
				draft_values 	: self.settings.editor.getDraftValues(),
				security			: dittyVars.security
			};
			$.post( dittyVars.ajaxurl, data, function( response ) {
				if ( response.display_items ) {
					if ( self.isEmptyTicker ) {
						var placeholderItems = self.settings.editor.ditty.options( 'items' );
						$.each( placeholderItems, function( index, data ) {
							self.settings.editor.ditty.deleteItem( data.id );
						} );
						self.isEmptyTicker = false;
					}
			    $.each( response.display_items, function( key, value ) {
				    self.settings.editor.ditty.addItem( value, 0 );
					} ); 		
		    }
				if ( response.editor_item ) {
					var $new = $( response.editor_item );
					$new.hide();
					self.$listItems.prepend( $new );
					$new.slideDown();
					self._updateItemIndexes();
					//self.settings.editor.addUpdate( 'item_add', value.id ); // Add to the update queue
				}
				if ( response.draft_id && response.draft_data ) {
					dittyDraftItemUpdateData( self, response.draft_id, null, response.draft_data );
				}
				if ( response.draft_id && response.draft_meta ) {
					dittyDraftItemUpdateMeta( self, response.draft_id, null, response.draft_meta );
				}
				//.settings.editor.updateStop(); // Stop the update overlay
			}, 'json' );
		},
		
		/**
		 * Clone a item
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _cloneItem: function( e ) { 
		  e.preventDefault();
		  var self 		= e.data.self,
					$button = $( e.target ).is( 'a' ) ? $( e.target ) : $( e.target ).parent( 'a' ),
					$item 	= $button.parents( '.ditty-data-list__item' ),
					itemId = $item.data( 'item_id' );

			self.settings.editor.updateStart(); // Start the update overlay
			
			// Load the new display fields		
			var data = {
				action				: 'ditty_editor_item_clone',
				item_id				: itemId,
				draft_values	: self.settings.editor.getDraftValues(),
				security			: dittyVars.security
			};
			$.post( dittyVars.ajaxurl, data, function( response ) {
				if ( response.display_items && response.display_items.length ) {
					self.settings.editor.ditty.updateItems( response.display_items, itemId, 'after' );
				}
				if ( response.editor_item ) {
					var $new = $( response.editor_item );
			    $new.hide();
			    $item.after( $new );
			    $new.slideDown();
			    self._updateItemIndexes();
		    }
				if ( response.draft_id && response.draft_data ) {
					dittyDraftItemUpdateData( self, response.draft_id, null, response.draft_data );
				}
				if ( response.draft_id && response.draft_meta ) {
					dittyDraftItemUpdateMeta( self, response.draft_id, null, response.draft_meta );
				}
				self.settings.editor.updateStop(); // Stop the update overlay	
			}, 'json' );
		},

		/**
		 * Delete a item
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _deleteItem: function( e ) { 
		  e.preventDefault();
		  var self 			= e.data.self,
					$button 	= $( e.target ).is( 'a' ) ? $( e.target ) : $( e.target ).parent( 'a' ),
					$item 		= $button.parents( '.ditty-data-list__item' ),
					itemId 		= $item.data( 'item_id' );

			if ( 1 >= self.$elmt.find( '.ditty-data-list__item' ).length ) {
				self.$add.trigger( 'click' );
			}
			
			// Remove the item from the editor and ditty
			$item.slideUp( function() {
				$( this ).remove();
			} );
			self.settings.editor.ditty.deleteItem( itemId );
			dittyDraftItemDelete( self, itemId ); // Remove the draft data
		},
		
		/**
		 * Update the item order
		 *
		 * @since		3.0
		 * @return	null
		*/
    _updateItemIndexes: function( action ) {
		  var self = this,
	    		itemIds = [];

	    this.$elmt.find( '.ditty-data-list__item' ).each( function( index ) {
				var itemId = $( this ).data( 'item_id' );
				itemIds.push( itemId );
				dittyDraftItemUpdateData( self, itemId, 'item_index', index );
	    } );
	    
			if ( 'updateDitty' === action ) {
		    // Update the ditty with the new order
		    var reorderedItems = dittyItemsReorder( self.settings.editor.ditty.options( 'items' ), itemIds );
				self.settings.editor.ditty.options( 'items', reorderedItems );
			}
	  },

    /**
		 * Do actions when panel is visible
		 *
		 * @since  	3.0
		 * @return 	null
		*/
    panelVisible: function () {
			this.$elmt.find( '.ditty-data-list__item' ).removeClass( 'editing' );
    },

	  /**
		 * Return a specific setting
		 *
		 * @since    3.0
		 * @return   null
		*/
    _options: function ( key ) {
	    return this.settings[key];
    },
    
		/**
		 * Setup triggers
		 *
		 * @since  	3.0
		 * @return 	null
		*/
    trigger: function ( fn, customParams ) {
	    var params = [this.settings]; 
	    
	    if ( customParams ) {
		    params = customParams;
	    }

	    this.$elmt.trigger( 'ditty_items_panel_' + fn, params );
	
	    if ( typeof this.settings[fn] === 'function' ) {
	      this.settings[fn].apply( this.$elmt, params );
	    }
    },

		/**
		 * Allow settings to be modified
		 *
		 * @since  	3.0
		 * @return 	null
		*/
    options: function ( key, value ) {

	    if ( typeof key === 'object' ) {
	      this.settings = $.extend( {}, defaults, $.ditty_items_panel.defaults, key );
	    } else if ( typeof key === 'string' ) {
        if ( value === undefined ) {
	        return this.settings[key];
        }
        this.settings[key] = value;
	    } else {
        return this.settings;
	    }

	    this.trigger( 'options_update' );
    },

		/**
		 * Destroy the editor
		 *
		 * @since  	3.0
		 * @return 	null
		*/
    destroy: function () {

	    // Remove the init class
	    this.$elmt.removeClass( 'init' );
	    
	    // Remove actions
			this.settings.editor.$elmt.off( 'ditty_editor_active_items_update', { self: this }, this._dittyActiveItemsUpdated );
	    this.$add.off( 'click', { self: this }, this._add_item );
	  	this.$elmt.off( 'click', '.ditty-data-list__item', { self: this }, this._showItem );
			this.$elmt.off( 'click', '.ditty-data-list__item__icon', { self: this }, this._editType );
			this.$elmt.off( 'click', '.ditty-data-list__item__edit', { self: this }, this._editItem );
			this.$elmt.off( 'click', '.ditty-data-list__item__layout', { self: this }, this._editLayoutVariations );
			this.$elmt.off( 'click', '.ditty-data-list__item__clone', { self: this }, this._cloneItem );
			this.$elmt.off( 'click', '.ditty-data-list__item__delete', { self: this }, this._deleteItem );
			this.$list.off( 'click', '.ditty-editor-item > a', { self: this }, this._actionClick );
			$( 'body' ).off( 'ditty_editor_save_ditty_response', { self: this }, this._dittyEditorSaveResponse );
	    
	    this.trigger( 'destroy' );
	    this.elmt._ditty_items_panel = null;
    }
  };

	/**
	 * Create the data list
	 *
	 * @since  	3.0
	 * @return 	null
	*/
  $.fn.ditty_items_panel = function( options ) {
    var args = arguments,
        error = false,
        returns;

    if ( options === undefined || typeof options === 'object' ) {
      return this.each( function () {
        if ( ! this._ditty_items_panel ) {
        	this._ditty_items_panel = new Ditty_Items_Panel( this, options );
        }
      });
    } else if ( typeof options === 'string' ) {
      this.each( function () {
        var instance = this._ditty_items_panel;

        if ( ! instance ) {
          throw new Error( 'No Ditty_Items_Panel applied to this element.' );
        }
        if ( typeof instance[options] === 'function' && options[0] !== '_' ) {
          returns = instance[options].apply( instance, [].slice.call( args, 1 ) );
        } else {
          error = true;
        }
      } );

      if ( error ) {
        throw new Error( 'No method "' + options + '" in Ditty_Items_Panel.' );
      }

      return returns !== undefined ? returns : this;
    }
  };

  $.ditty_items_panel = {};
  $.ditty_items_panel.defaults = defaults;

} )( jQuery );


/**
 * Ditty Editor
 *
 * @since		3.0
 * @return	null
*/

(function ($) {
  'use strict';

  var defaults = {
	  editor: null
  };

  var Ditty_Item_Types_Panel = function ( elmt, options ) {
	  
    this.elmt         	= elmt;
    this.settings     	= $.extend( {}, defaults, $.ditty_item_types_panel.defaults, options );
    this.$elmt        	= $( elmt );
    this.$back					= this.$elmt.find( '.ditty-editor-options__back' );   
    this.$editorItem 		= this.settings.editor.$panels.find( '.ditty-editor__panel--items' ).find( '.ditty-data-list__item.editing' );
    this.editorDittyId	= this.$editorItem.data( 'ditty_id' );
    this.editorItemId		= this.$editorItem.data( 'item_id' );
    this.currentType		= null;
   
    this._init();
  };


  Ditty_Item_Types_Panel.prototype = {

    /**
		 * Initialize the data list
		 *
		 * @since		3.0
		 * @return	null
		*/
    _init: function () {
	    this.$elmt.addClass( 'init' );

	    // Initialize dynamic fields
      this.settings.editor.initFields( this.$elmt );
			
			// Add actions
			this.$back.on( 'click', { self: this }, this._backClick );
	    this.$elmt.on( 'click', '.ditty-editor-item-type', { self: this }, this._typeClick );
	    
	    this.panelVisible();
    },
    
    /**
     * Return to the item list
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _showItemsList: function() {
			this.settings.editor.panelOptions( 'transition', 'slideLeft' );
			this.settings.editor.showPanel( 'items' );
    },

    /**
     * Cancel click
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _backClick: function( e ) {
		  e.preventDefault();
		  var self = e.data.self;
		  self._showItemsList();
    },

    /**
		 * Select a new type
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _typeClick: function( e ) {
		  e.preventDefault();
		  
		  var self			= e.data.self,
		  		$item 		= $( e.target ).is( '.ditty-editor-item-type' ) ? $( e.target ) : $( e.target ).parents( '.ditty-editor-item-type' ),
		  		itemType 	= $item.data( 'item_type' );

		  if ( itemType === self.currentType ) {
			  self._showItemsList();  // Show the display list
			} else {
		
			  self.settings.editor.updateStart(); // Start the update overlay
				//dittyDraftItemUpdateData( self, self.editorItemId, 'item_type', itemType );

				var data = {
					action				: 'ditty_editor_item_type_update',
					item_id				: self.editorItemId,
					item_type			: itemType,
					draft_values 	: self.settings.editor.getDraftValues(),
					security			: dittyVars.security
				};
				$.post( dittyVars.ajaxurl, data, function( response ) {
					if ( response.display_items ) {
						self.settings.editor.ditty.updateItems( response.display_items, self.editorItemId );
					}
					if ( response.editor_item ) {
						var $editorItem = $( response.editor_item );
						self.$editorItem.after( $editorItem );
						self.$editorItem.remove();
						self.$editorItem = $editorItem;
					}
					if ( response.draft_id && response.draft_data ) {
						dittyDraftItemUpdateData( self, response.draft_id, null, response.draft_data );
					}
					self._showItemsList(); // Show the display list
					self.settings.editor.updateStop(); // Stop the update overlay
				}, 'json' );
			}
    },
    
    /**
		 * Do actions when panel is visible
		 *
		 * @since  	3.0.12
		 * @return 	null
		*/
    panelVisible: function () {
	    this.$editorItem 		= this.settings.editor.$panels.find( '.ditty-editor__panel--items' ).find( '.ditty-data-list__item.editing' );
	    this.editorDittyId	= this.$editorItem.data( 'ditty_id' );
	    this.editorItemId		= this.$editorItem.data( 'item_id' );
	    this.currentType		= this.$editorItem.data( 'item_type' );
			this.$elmt.find( '.ditty-editor-item-type' ).removeClass( 'active' );
	    this.$elmt.find( '.ditty-editor-item-type[data-item_type="' + this.currentType + '"]' ).addClass( 'active' );
    },
    
    /**
		 * Do actions when panel is hidden
		 *
		 * @since  	3.0
		 * @return 	null
		*/
    panelHidden: function () {
	    var $editorItemIcon = this.$editorItem.find( '.ditty-data-list__item__icon' ).children( 'i' );
	    $editorItemIcon.attr( 'class', $editorItemIcon.data( 'class' ) ); 
    },

	  /**
		 * Return a specific setting
		 *
		 * @since    3.0
		 * @return   null
		*/
    _options: function ( key ) {
	    return this.settings[key];
    },
    
		/**
		 * Setup triggers
		 *
		 * @since  	3.0
		 * @return 	null
		*/
    trigger: function ( fn, customParams ) {
	    var params = [this.settings]; 
	    if ( customParams ) {
		    params = customParams;
	    }

	    this.$elmt.trigger( 'ditty_item_types_panel_' + fn, params );
	
	    if ( typeof this.settings[fn] === 'function' ) {
	      this.settings[fn].apply( this.$elmt, params );
	    }
    },
		
		/**
		 * Allow settings to be modified
		 *
		 * @since  	3.0
		 * @return 	null
		*/
    options: function ( key, value ) {

	    if ( typeof key === 'object' ) {
	      this.settings = $.extend( {}, defaults, $.ditty_item_types_panel.defaults, key );
	    } else if ( typeof key === 'string' ) {
        if ( value === undefined ) {
	        return this.settings[key];
        }
        this.settings[key] = value;
	    } else {
        return this.settings;
	    }

	    this.trigger( 'options_update' );
    },

		/**
		 * Destroy the editor
		 *
		 * @since  	3.0
		 * @return 	null
		*/
    destroy: function () {
	    
	    // Remove the init class
	    this.$elmt.removeClass( 'init' );
	    
	    // Remove actions
	    this.$back.off( 'click', { self: this }, this._backClick );
	    this.$elmt.off( 'click', '.ditty-editor-item-type', { self: this }, this._typeClick );
	    
	    this.trigger( 'destroy' );
	    this.elmt._ditty_item_types_panel = null;	    
    }
  };

	/**
	 * Create the data list
	 *
	 * @since  	3.0
	 * @return 	null
	*/
  $.fn.ditty_item_types_panel = function( options ) {
    var args = arguments,
        error = false,
        returns;

    if ( options === undefined || typeof options === 'object' ) {
      return this.each( function () {
        if ( ! this._ditty_item_types_panel ) {
        	this._ditty_item_types_panel = new Ditty_Item_Types_Panel( this, options );
        }
      });
    } else if ( typeof options === 'string' ) {
      this.each( function () {
        var instance = this._ditty_item_types_panel;

        if ( ! instance ) {
          throw new Error( 'No Ditty_Item_Types_Panel applied to this element.' );
        }
        if ( typeof instance[options] === 'function' && options[0] !== '_' ) {
          returns = instance[options].apply( instance, [].slice.call( args, 1 ) );
        } else {
          error = true;
        }
      } );

      if ( error ) {
        throw new Error( 'No method "' + options + '" in Ditty_Item_Types_Panel.' );
      }

      return returns !== undefined ? returns : this;
    }
  };

  $.ditty_item_types_panel = {};
  $.ditty_item_types_panel.defaults = defaults;

} )( jQuery );


/**
 * Ditty Editor
 *
 * @since		3.0
 * @return	null
*/

(function ($) {
  'use strict';

  var defaults = {
	  editor: null
  };

  var Ditty_Item_Editor_Panel = function ( elmt, options ) {
	  
    this.elmt         			= elmt;
    this.settings     			= $.extend( {}, defaults, $.ditty_item_editor_panel.defaults, options );
    this.$elmt        			= $( elmt );
    this.$form							= this.$elmt.find( '.ditty-editor-options' );
		this.$back							= this.$elmt.find( '.ditty-editor-options__back' );
		this.$preview						= this.$elmt.find( '.ditty-editor-options__preview' );
    this.$title							= this.$elmt.find( '.ditty-editor-options__title' );
    this.itemId							= this.$form.data( 'item_id' );
    this.itemType						= this.$form.data( 'item_type' );
    this.dittyId						= this.$form.data( 'ditty_id' );
    this.$editorItem 				= this.settings.editor.$panels.find( '.ditty-editor__panel--items' ).find( '.ditty-data-list__item.editing' );
    this.$editorItemTitle		= this.$editorItem.find( '.ditty-data-list__item__label' );
    this.initData						= null;
    this.afterUpdateAction	= '';	

    this._init();
  };


  Ditty_Item_Editor_Panel.prototype = {

    /**
		 * Initialize the data list
		 *
		 * @since		3.0.12
		 * @return	null
		*/
    _init: function () {
			
			var self = this;

      // Save the initial data
	    this.initData = this.$form.serialize();

      // Initialize dynamic fields
      this.settings.editor.initFields( this.$elmt );
      
      // Add actions
      this.settings.editor.$elmt.on( 'ditty_editor_add_drafts', { self: this }, this._addDrafts );
			this.settings.editor.$elmt.on( 'ditty_editor_save_drafts', { self: this }, this._saveDrafts );
      this.$form.on( 'submit', { self: this }, this._submitForm );
	    this.$back.on( 'click', { self: this }, this._backClick );
	    this.$preview.on( 'click', { self: this }, this._previewClick );
			this.$form.on( 'keyup change', 'input[type="text"], input[type="number"], textarea, select', { self: this }, this._checkUpdates );
			this.$form.on( 'click', 'input[type="radio"], input[type="checkbox"]', { self: this }, this._checkUpdates );
			this.$form.on( 'ditty_input_wysiwyg_update', '.ditty-input--wysiwyg', { self: this }, this._checkUpdates );
			this.$form.on( 'ditty_field_update', '.ditty-field__input', { self: this }, this._checkUpdates );
			
			// Trigger the init
			setTimeout( function() {
				self.trigger( 'init', [self] ); 
			}, 1 );
    },
    
    /**
     * Return to the item list
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _showItemList: function() {
			this.settings.editor.$panels.ditty_slider( 'options', 'transition', 'slideRight' );
			this.settings.editor.$panels.ditty_slider( 'showSlideById', 'items' );
    },
    
    /**
     * Preview button add updates class
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _enablePreviewButton: function() {
		  this.$preview.addClass( 'ditty-has-updates' );
    },
    
    /**
     * Preview button remove updates class
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _disablePreviewButton: function() {
		  this.$preview.removeClass( 'ditty-has-updates' );
		  this.$preview.children( 'i' ).attr( 'class', this.$preview.children( 'i' ).data( 'class' ) );
    },
    
    /**
		 * Check for updates
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _checkUpdates: function( e ) {
			var self = e ? e.data.self : this;
		  var currentData = self.$form.serialize();
		  if ( currentData !== self.initData ) {
			  self._enablePreviewButton();
			  self.settings.editor.addUpdate( 'item_settings', self.itemId );
				self.settings.editor.delayedSubmitEnable(); // Enable the delayed submit since we have changes
		  }	else {
			  self._disablePreviewButton();
			  self.settings.editor.removeUpdate( 'item_settings', self.itemId );
		  }
		},
    
    /**
     * Editor tabs listener
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _addDrafts: function( e ) {
		  var self 				= e.data.self,
		  		currentData = self.$form.serialize();

		  if ( currentData !== self.initData ) {
			  self.$form.trigger( 'submit' );
		  }	
    },
		
		/**
		 * Editor updated listener
		 *
		 * @since    3.0
		 * @return   null
		*/
		_saveDrafts: function( e ) {
			var self = e.data.self,
					currentData = self.$form.serialize();

			if ( currentData !== self.initData ) {
				self.afterUpdateAction = 'save';
				self.$form.trigger( 'submit' );
			}	
		},

    /**
     * Back click
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _backClick: function( e ) {
		  e.preventDefault();
		  var self = e.data.self,
		  		currentData = self.$form.serialize();
		  		
		  if ( currentData === self.initData ) {
			  self._showItemList();
		  } else {
			  self.afterUpdateAction = 'return';
			  self.$form.trigger( 'submit' );
		  }	
    },
    
    /**
     * Preview any changes
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _previewClick: function( e ) {
		  e.preventDefault();
		  var self = e.data.self,
		  		currentData = self.$form.serialize();
	
		  if ( currentData !== self.initData ) {  
			  self.$preview.children( 'i' ).attr( 'class', dittyVars.updateIcon );
			  self.$form.trigger( 'submit' ); 
		  }
    },

    /**
		 * Submit updates
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _submitForm: function( e ) {
		  e.preventDefault(); 
		  var self 				= e.data.self,
		  		itemId 		= self.itemId;
			
			self.settings.editor.updateStart(); // Start the update overlay
			
		  var data = {
        action				: 'ditty_editor_item_update',
        item_id 			: itemId,
				draft_values 	: self.settings.editor.getDraftValues(),
        security			: dittyVars.security
	    };
		  self.$form.ajaxSubmit( {
		    url				: dittyVars.ajaxurl,
				type			: 'post',
				dataType	: 'json',
				data			: data,
				error			: function() {
				},
        success		: function( response ) { 
					if ( response.value_updates ) {
						self._updateValues( response.value_updates );
					}
	        self.initData = self.$form.serialize();
	        self._disablePreviewButton();

					if ( response.display_items ) {
						self.settings.editor.ditty.updateItems( response.display_items, itemId );
					}
					if ( response.editor_item ) {
						var $item = $( response.editor_item ),
								itemTitle = $item.children( '.ditty-data-list__item__label' ).text();
								
						// Set the new titles
						self.$title.html( itemTitle );
						self.$editorItemTitle.html( itemTitle );
					}
					if ( response.draft_id && response.draft_data ) {
						dittyDraftItemUpdateData( self, response.draft_id, null, response.draft_data );
					}
					if ( response.draft_id && response.draft_meta ) {
						dittyDraftItemUpdateMeta( self, response.draft_id, null, response.draft_meta );
					}

					self.settings.editor.updateStop(); // Stop the update overlay
					self.settings.editor.delayedSubmitDisable(); // Remove the delayed submit since we just submitted

					// Show the items list
					if ( 'return' === self.afterUpdateAction ) {
						self._showItemList();
					}
					// Update the Ditty
					if ( 'save' === self.afterUpdateAction ) {
						self.settings.editor.saveDitty( { return_items: 0 } );
					}
					self.afterUpdateAction = '';
        }
	    } ); 
    },
		
		/**
		 * Update field values
		 *
		 * @since    3.0
		 * @return   null
		*/
		_updateValues: function ( data ) {
			var self = this;
			$.each( data, function( key, value ) {
				var $element = self.$form.find( '[name="' + key + '"]' );
				if ( $element.length ) {
					$element.val( value );
				}
			} );
		},

	  /**
		 * Return a specific setting
		 *
		 * @since    3.0
		 * @return   null
		*/
    _options: function ( key ) {
	    return this.settings[key];
    },
    
		/**
		 * Setup triggers
		 *
		 * @since  	3.0
		 * @return 	null
		*/
    trigger: function ( fn, customParams ) {
	    var params = [this.settings]; 
	    
	    if ( customParams ) {
		    params = customParams;
	    }
	    this.$elmt.trigger( 'ditty_item_editor_panel_' + fn, params );
	
	    if ( typeof this.settings[fn] === 'function' ) {
	      this.settings[fn].apply( this.$elmt, params );
	    }
    },
		
		/**
		 * Allow settings to be modified
		 *
		 * @since  	3.0
		 * @return 	null
		*/
    options: function ( key, value ) {

	    if ( typeof key === 'object' ) {
	      this.settings = $.extend( {}, defaults, $.ditty_item_editor_panel.defaults, key );
	    } else if ( typeof key === 'string' ) {
        if ( value === undefined ) {
	        return this.settings[key];
        }
        this.settings[key] = value;
	    } else {
        return this.settings;
	    }

	    this.trigger( 'options_update' );
    },

		/**
		 * Destroy the editor
		 *
		 * @since  	3.0
		 * @return 	null
		*/
    destroy: function () {
	    
			// Remove listeners
	    this.settings.editor.$elmt.off( 'ditty_editor_add_drafts', { self: this }, this._saveDrafts );
			this.settings.editor.$elmt.off( 'ditty_editor_save_drafts', { self: this }, this._saveDrafts );
      this.$form.off( 'submit', { self: this }, this._submitForm );
	    this.$back.off( 'click', { self: this }, this._backClick );	 
	    this.$preview.off( 'click', { self: this }, this._previewClick ); 
			this.$form.off( 'keyup change', 'input[type="text"], input[type="number"], textarea, select', { self: this }, this._checkUpdates );
			this.$form.off( 'click', 'input[type="radio"], input[type="checkbox"]', { self: this }, this._checkUpdates );
			this.$form.off( 'ditty_input_wysiwyg_update', '.ditty-input--wysiwyg', { self: this }, this._checkUpdates );
			this.$form.off( 'ditty_field_update', '.ditty-field__input', { self: this }, this._checkUpdates );
			
	    this.elmt._ditty_item_editor_panel = null;	    
    }
  };

	/**
	 * Create the data list
	 *
	 * @since  	3.0
	 * @return 	null
	*/
  $.fn.ditty_item_editor_panel = function( options ) {
    var args = arguments,
        error = false,
        returns;

    if ( options === undefined || typeof options === 'object' ) {
      return this.each( function () {
        if ( ! this._ditty_item_editor_panel ) {
        	this._ditty_item_editor_panel = new Ditty_Item_Editor_Panel( this, options );
        }
      });
    } else if ( typeof options === 'string' ) {
      this.each( function () {
        var instance = this._ditty_item_editor_panel;

        if ( ! instance ) {
          throw new Error( 'No Ditty_Item_Editor_Panel applied to this element.' );
        }
        if ( typeof instance[options] === 'function' && options[0] !== '_' ) {
          returns = instance[options].apply( instance, [].slice.call( args, 1 ) );
        } else {
          error = true;
        }
      } );

      if ( error ) {
        throw new Error( 'No method "' + options + '" in Ditty_Item_Editor_Panel.' );
      }

      return returns !== undefined ? returns : this;
    }
  };

  $.ditty_item_editor_panel = {};
  $.ditty_item_editor_panel.defaults = defaults;

} )( jQuery );


/**
 * Ditty Displays Panel
 *
 * @since		3.0
 * @return	null
*/
( function ( $ ) {
  'use strict';

  var defaults = {
	  editor: null
  };

  var Ditty_Displays_Panel = function ( elmt, options ) {
    this.elmt         				= elmt;
    this.settings     				= $.extend( {}, defaults, $.ditty_displays_panel.defaults, options );
    this.$elmt        				= $( elmt );
    this.$list								= $( elmt ).find( '.ditty-data-list__items' );
    this.$contents       			= $( elmt ).find( '.ditty-editor__panel__contents' );
    this.initDisplay					= null;

    this._init();
  };


  Ditty_Displays_Panel.prototype = {

    /**
		 * Initialize the panel
		 *
		 * @since		3.0
		 * @return	null
		*/
    _init: function () {
	    this.$elmt.addClass( 'init' );

	    // Setup the display list
	    this.$elmt.ditty_ui_data_list( {
		    filter				: '.ditty-display-panel__filter',
		    item					: '.ditty-editor-display',
		    itemSelector	: 'display_type'
	    } );

	    // Activate the current layout
	    this.initDisplay = this.$list.data( 'active' );
	    this._activateDisplay( this.$list.find( '#ditty-editor-display--' + this.initDisplay ) );
	    
	    // Add listeners
			this.$elmt.on( 'click', '.ditty-data-list__item', { self: this }, this._selectDisplay );
			this.$elmt.on( 'click', '.ditty-data-list__item__edit', { self: this }, this._editDisplay );
			this.$elmt.on( 'click', '.ditty-data-list__item__clone', { self: this }, this._cloneDisplay );
			this.$elmt.on( 'click', '.ditty-data-list__item__delete', { self: this }, this._deleteDisplay );
	    this.settings.editor.$elmt.on( 'ditty_editor_saveDrafts', { self: this }, this._saveDrafts );
    },
    
    /**
     * Editor updated listener
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _saveDrafts: function( e ) {
		  var self = e.data.self;
		  self.initDisplay = self.$list.find( '.ditty-editor-display.active' ).data( 'display_id' );
    },
    
    /**
		 * Activate a display
		 *
		 * @since		3.0
		 * @return	null
		*/
    _activateDisplay: function ( $display ) {
	    this.$list.find( '.ditty-editor-display' ).removeClass( 'active' );
	    $display.addClass( 'active' );
    },

    /**
		 * Load a new display
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _initDitty: function( displayType, displayId, values ) { 
			
			var $elmnt = this.settings.editor.ditty.$elmt;

			values.display 	= displayId;
			values.id 			= this.settings.editor.ditty.options( 'id' );
			values.items 		= this.settings.editor.ditty.options( 'items' );
			values.height 	= this.settings.editor.ditty.options( 'height' );
			
			this.settings.editor.ditty.destroy();
			
			// Setup the new ticker and overwrite ditty
			$elmnt['ditty_' + displayType]( values );
			this.settings.editor.ditty = $elmnt['ditty_' + displayType]( 'options', 'ditty' );
		},
    
    /**
		 * Load a new display
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _selectDisplay: function( e ) { 
		  e.preventDefault();
		  var self = e.data.self;
		  if ( $( e.target ).parent().is( 'a' ) ) {
				return false;
			}
			
			var $display 			= $( e.target ).is( '.ditty-data-list__item' ) ? $( e.target ) : $( e.target ).parents( '.ditty-data-list__item' ),
					displayId 		= $display.data( 'display_id' ),
					displayType 	= $display.data( 'display_type' );
					
			if ( $display.hasClass( 'active' ) ) {
				return false;
			}
			
			self.settings.editor.updateStart(); // Start the update overlay
			dittyDraftUpdate( self, 'post_meta', '_ditty_display', displayId );
			self._activateDisplay( $display );

			// Load the new display data		
			var data = {
				action				: 'ditty_editor_select_display',
				display_id		: displayId,
				draft_values	: self.settings.editor.getDraftValues(),
				security			: dittyVars.security
			};
			$.post( dittyVars.ajaxurl, data, function( response ) {
				if ( ! response ) {
					return false;
				}
				self._initDitty( displayType, displayId, response ); // Initialize a new ditty
				self.settings.editor.updateStop(); // Stop the update overlay
			}, 'json' );		
    },

		/**
		 * Clone a display
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _cloneDisplay: function( e ) { 
		  e.preventDefault();
		  var self 			= e.data.self,
					$button 	= $( e.target ).is( 'a' ) ? $( e.target ) : $( e.target ).parent( 'a' ),
					$display 	= $button.parents( '.ditty-data-list__item' ),
					displayId	= $display.data( 'display_id' );

			self.settings.editor.updateStart(); // Start the update overlay
			
			// Load the new display fields		
			var data = {
				action				: 'ditty_editor_display_clone',
				display_id		: displayId,
				draft_values	: self.settings.editor.getDraftValues(),
				security			: dittyVars.security
			};

			$.post( dittyVars.ajaxurl, data, function( response ) {
				if ( response.editor_display ) {
					var $clone = $( response.editor_display );
			    $clone.hide();
			    $display.after( $clone );
			    $clone.slideDown();
		    }
				if ( response.draft_id && response.draft_data ) {
					dittyDraftDisplayUpdate( self, response.draft_id, null, response.draft_data );
				}
				self.settings.editor.updateStop(); // Stop the update overlay    
			}, 'json' );
		},

		/**
		 * Delete a display
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _deleteDisplay: function( e ) { 
		  e.preventDefault();

		  var self 				= e.data.self,
		  		$button 		= $( e.target ).is( 'a' ) ? $( e.target ) : $( e.target ).parent( 'a' ),
					$item 			= $button.parents( '.ditty-data-list__item' ),
					$nextItem 	= null,
					displayId 	= $item.data( 'display_id' );

			// Find the display to load if this one is active
			if ( $item.hasClass( 'active' ) ) {
				if ( $item.prev().length ) {
					$nextItem = $item.prev();
				} else if ( $item.next().length ) {
					$nextItem = $item.next();
				}
			}
			
			$item.slideUp( function() {
				$( this ).remove();
			} );
			dittyDraftDisplayDelete( self, displayId );
			
			// Possibly select another display
			if ( null !== $nextItem ) {
				$nextItem.trigger( 'click' );
			}
		},
  
    /**
		 * Edit a display
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _editDisplay: function( e ) { 
		  e.preventDefault();
		  var self = e.data.self;
		  self.$displayEdit = $( this ).parents( '.ditty-data-list__item' );
		  
		  var $button 	= $( e.target ).is( 'a' ) ? $( e.target ) : $( e.target ).parent( 'a' ),
					$display 	= $button.parents( '.ditty-data-list__item' ),
					displayId	= $display.data( 'display_id' );

			self.settings.editor.updateStart(); // Start the update overlay
			$display.addClass( 'editing' );

			// Load the new display fields		
			var data = {
				action				: 'ditty_editor_display_fields',
				display_id		: displayId,
				draft_values	: self.settings.editor.getDraftValues(),
				security			: dittyVars.security
			};
			$.post( dittyVars.ajaxurl, data, function( response ) {
				if ( response ) {
					var html = '<div class="ditty-editor__panel ditty-editor__panel--displayEditor">' + response + '</div>';
					self.settings.editor.panelOptions( 'transition', 'slideLeft' );
					self.settings.editor.showPanel( 'display_editor', html );
				}
			} );
		},

		/**
		 * Do actions when panel is visible
		 *
		 * @since  	3.0
		 * @return 	null
		*/
		panelVisible: function () {
			this.$elmt.find( '.ditty-data-list__item' ).removeClass( 'editing' );
		},
		
		/**
		 * Setup triggers
		 *
		 * @since  	3.0
		 * @return 	null
		*/
    trigger: function ( fn, customParams ) {
	    var params = [this.settings]; 
	    if ( customParams ) {
		    params = customParams;
	    }

	    this.$elmt.trigger( 'ditty_displays_panel_' + fn, params );
	    if ( typeof this.settings[fn] === 'function' ) {
	      this.settings[fn].apply( this.$elmt, params );
	    }
    },	
		
		/**
		 * Allow settings to be modified
		 *
		 * @since  	3.0
		 * @return 	null
		*/
    options: function ( key, value ) {
	    if ( typeof key === 'object' ) {
	      this.settings = $.extend( {}, defaults, $.ditty_displays_panel.defaults, key );
	    } else if ( typeof key === 'string' ) {
        if ( value === undefined ) {
	        return this.settings[key];
        }
        this.settings[key] = value;
	    } else {
        return this.settings;
	    }

	    this.trigger( 'options_update' );
    },

		/**
		 * Destroy the panel
		 *
		 * @since  	3.0
		 * @return 	null
		*/
    destroy: function () {
	    
	    // Remove the init class
	    this.$elmt.removeClass( 'init' );
	    
	    // Destroy the display list
	    this.$elmt.ditty_ui_data_list( 'destroy' );
			
			// Remove listeners
			this.$elmt.off( 'click', '.ditty-data-list__item', { self: this }, this._selectDisplay );
			this.$elmt.off( 'click', '.ditty-data-list__item__edit', { self: this }, this._editDisplay );
			this.$elmt.off( 'click', '.ditty-data-list__item__clone', { self: this }, this._cloneDisplay );
			this.$elmt.off( 'click', '.ditty-data-list__item__delete', { self: this }, this._deleteDisplay );
			this.settings.editor.$elmt.off( 'ditty_editor_save_drafts', { self: this }, this._saveDrafts );
	    
	    this.trigger( 'destroy' );
	    this.elmt._ditty_displays_panel = null;
    }
  };

	/**
	 * Create the data list
	 *
	 * @since  	3.0
	 * @return 	null
	*/
  $.fn.ditty_displays_panel = function( options ) {
    var args = arguments,
        error = false,
        returns;

    if ( options === undefined || typeof options === 'object' ) {
      return this.each( function () {
        if ( ! this._ditty_displays_panel ) {
        	this._ditty_displays_panel = new Ditty_Displays_Panel( this, options );
        }
      });
    } else if ( typeof options === 'string' ) {
      this.each( function () {
        var instance = this._ditty_displays_panel;

        if ( ! instance ) {
          throw new Error( 'No Ditty_Displays_Panel applied to this element.' );
        }
        if ( typeof instance[options] === 'function' && options[0] !== '_' ) {
          returns = instance[options].apply( instance, [].slice.call( args, 1 ) );
        } else {
          error = true;
        }
      } );

      if ( error ) {
        throw new Error( 'No method "' + options + '" in Ditty_Displays_Panel.' );
      }

      return returns !== undefined ? returns : this;
    }
  };

  $.ditty_displays_panel = {};
  $.ditty_displays_panel.defaults = defaults;

} )( jQuery );


/**
 * Ditty Display Editor Panel
 *
 * @since		3.0
 * @return	null
*/

(function ($) {
  'use strict';

  var defaults = {
	  editor: null
  };

  var Ditty_Display_Editor_Panel = function ( elmt, options ) {
	  
    this.elmt         				= elmt;
    this.settings     				= $.extend( {}, defaults, $.ditty_display_editor_panel.defaults, options );
    this.$elmt        				= $( elmt );
    this.$form								= this.$elmt.find( '.ditty-editor-options' );
    this.$back								= this.$elmt.find( '.ditty-editor-options__back' );
    this.$optionsTitle				= this.$elmt.find( '.ditty-editor-options__title' );
    this.$importExportField		= this.$elmt.find( '.ditty-editor__import-export__field' );
    this.$importExportUpdate	= this.$elmt.find( '.ditty-editor__import-export__update' );
    this.displayTitle					= null;
    this.displayId						= this.settings.editor.ditty.options( 'display' );
    this.displayType					= this.settings.editor.ditty.options( 'type' );
    this.$editorDisplay 			= this.settings.editor.$panels.find( '.ditty-editor__panel--displays' ).find( '.ditty-data-list__item.editing' );
    this.$editorDisplayTitle	= this.$editorDisplay.find( '.ditty-data-list__item__label' );
    this.displayOptions				= null;
    this.initData							= null;
    this.afterUpdateAction		= '';	

    this._init();
  };


  Ditty_Display_Editor_Panel.prototype = {

    /**
		 * Initialize the data list
		 *
		 * @since		3.0
		 * @return	null
		*/
    _init: function () {
	    
      var self = this,
      		displayOptions;
      		
      // Save the initial data
	    this.initData = this.$form.serialize();
	    
	    // Initialize dynamic fields
      this.settings.editor.initFields( this.$elmt );

      // Store the current ditty options
	    displayOptions = this.settings.editor.ditty.$elmt['ditty_' + this.displayType]( 'options' );
	    this.displayOptions = $.extend( {}, displayOptions );

      this.displayTitle = this.$optionsTitle.val();
      
      // Add actions
      this.$importExportUpdate.on( 'click', { self: this }, this._importUpdate );   
			this.settings.editor.$elmt.on( 'ditty_editor_add_drafts', { self: this }, this._addDrafts );
      this.settings.editor.$elmt.on( 'ditty_editor_save_drafts', { self: this }, this._saveDrafts );
	    this.$form.on( 'submit', { self: this }, this._submitForm );
	    this.$back.on( 'click', { self: this }, this._backClick );
			this.$elmt.on( 'change', 'input[type="text"], input[type="number"]', { self: this }, this._textfieldListeners );
			this.$form.on( 'click', 'input[type="radio"]', { self: this }, this._radioListeners );
			this.$form.on( 'click', 'input[type="checkbox"]', { self: this }, this._checkboxListeners );
			this.$form.on( 'change', 'select', { self: this }, this._selectListeners );
			this.$form.on( 'ditty_field_clone_update', { self: this }, this._cloneListeners );

			// Trigger the init
      setTimeout( function() {
        self.trigger( 'init', [self] ); 
      }, 1 );
    },
    
    /**
     * Return to the displays list
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _showDisplayList: function() {
			this.settings.editor.$panels.ditty_slider( 'options', 'transition', 'slideRight' );
			this.settings.editor.$panels.ditty_slider( 'showSlideById', 'displays' );
    },
    
    /**
		 * Check for updates
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _checkUpdates: function() { 
		  var currentData = this.$form.serialize();
		  if ( currentData !== this.initData ) {
			  this.settings.editor.addUpdate( 'displaySettings', this.displayId );
				this.settings.editor.delayedSubmitEnable(); // Enable the delayed submit since we have changes
		  }	else {
			  this.settings.editor.removeUpdate( 'displaySettings', this.displayId );
		  }
		},
		
		/**
     * Editor tabs listener
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _addDrafts: function( e ) {
		  var self = e.data.self,
		  		currentData = self.$form.serialize();

		  if ( currentData !== self.initData ) {
			  self.$form.trigger( 'submit' );
		  }	
    },
		
		/**
		 * Editor updated listener
		 *
		 * @since    3.0
		 * @return   null
		*/
		_saveDrafts: function( e ) {
			var self = e.data.self,
					currentData = self.$form.serialize();

			if ( currentData !== self.initData ) {
				self.afterUpdateAction = 'save';
				self.$form.trigger( 'submit' );
			}	
		},
    
    /**
     * Back click
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _backClick: function( e ) {
		  e.preventDefault();
		  var self = e.data.self,
		  		currentData = self.$form.serialize();
					
		  if ( currentData === self.initData ) {
			  self._showDisplayList();
		  } else {
			  self.afterUpdateAction = 'return';
			  self.$form.trigger( 'submit' );
		  }	
    },

	  /**
		 * Cancel click
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _submitForm: function( e ) {
		  e.preventDefault();
		  var self = e.data.self;
			
		  self.settings.editor.updateStart(); // Start the update overlay
			
			var data = {
				action				: 'ditty_editor_display_update',
				display_id		: self.displayId,
				draft_values	: self.settings.editor.getDraftValues(),
				security			: dittyVars.security
			};
		  self.$form.ajaxSubmit( {
		    url				: dittyVars.ajaxurl,
				type			: 'post',
				dataType	: 'json',
				data			: data,
        success: function( response ) {
	        self.initData = self.$form.serialize();

					if ( response.draft_id && response.draft_label ) {
						self.displayTitle = response.draft_label;
						self.$editorDisplayTitle.text( response.draft_label );
						dittyDraftDisplayUpdate( self, response.draft_id, 'label', response.draft_label );
					}
					if ( response.draft_id && response.draft_settings ) {
						self.displayOptions = response.draft_settings;
						dittyDraftDisplayUpdate( self, response.draft_id, 'settings', response.draft_settings );
					}
	        if ( response.draft_settings_json && self.$importExportField.length ) {
		        self.$importExportField.val( response.draft_settings_json );
	        }
					
					self.settings.editor.updateStop(); // Stop the update overlay
					self.settings.editor.delayedSubmitDisable(); // Remove the delayed submit since we just submitted
					
					// Show the display list
					if ( 'return' === self.afterUpdateAction ) {
						self._showDisplayList();
					}
					// Update the ticker
					if ( 'save' === self.afterUpdateAction ) {
						self.settings.editor.saveDitty();
					}
					self.afterUpdateAction = '';
        }
	    } ); 
    },
    
    /**
		 * Update the imported values
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _importUpdate: function( e ) {
			e.preventDefault();
			
		  // var self 		= e.data.self,
		  // 		values 	= self.$importExportField.val();
    },
		
		/**
		 * Listen for clone changes
		 *
		 * @since    3.0
		 * @return   null
		*/
		_cloneListeners: function( e, fieldData, cloneName ) {
			var self = e.data.self,
					$target = $( e.target );

			self.settings.editor.ditty.options( cloneName, fieldData );
		},
    
    /**
		 * Listen for textfield changes
		 *
		 * @since    3.0
		 * @return   null
		*/
    _textfieldListeners: function( e ) {
	    var self = e.data.self,
					$target = $( e.target ),
					name = $target.attr( 'name' ),
					$fieldset = $target.parents( '.ditty-input--spacing__group, .ditty-input--radius__group' );	
					
	  	if ( $fieldset.length ) {
		  	var fieldsetName = '',
		  			fieldsetValue = {};
		  	$fieldset.find( 'input').each( function() {
			  	name = $( this ).attr( 'name' );
			  	fieldsetName = name.split( '[' );
			  	fieldsetName = fieldsetName[0];
			  	var matches = name.match(/\[(.*)\]/);
			  	fieldsetValue[matches[1]] = $( this ).val();
		  	} );
		  	self.settings.editor.ditty.options( fieldsetName, fieldsetValue );
	  	} else { 
				self.settings.editor.ditty.options( name, $target.val() );
	  	}
			self._checkUpdates();
	  },
	  
	  /**
		 * Listen for radio button changes
		 *
		 * @since    3.0
		 * @return   null
		*/
    _radioListeners: function( e ) { 
	  	var self = e.data.self,
					$target = $( e.target ),
					value = $target.val(),
					name = $target.attr( 'name' );

	  	self.settings.editor.ditty.options( name, value );
			self._checkUpdates();
	  },
	  
	  /**
		 * Listen for checkbox changes
		 *
		 * @since    3.0
		 * @return   null
		*/
    _checkboxListeners: function( e ) {
			var self = e.data.self,
					$target = $( e.target ),
					value = $target.is( ':checked' ) ? $( this ).val() : false,
					name = $target.attr( 'name' );
		  				
	  	self.settings.editor.ditty.options( name, value );
			self._checkUpdates();
	  },
	  
	  /**
		 * Listen for select changes
		 *
		 * @since    3.0
		 * @return   null
		*/
    _selectListeners: function( e ) {
			var self = e.data.self,
					$target = $( e.target ),
					value = $target.val(),
					name = $target.attr( 'name' ); 

	  	self.settings.editor.ditty.options( name, value );
			self._checkUpdates();
	  },
		
	  /**
		 * Return a specific setting
		 *
		 * @since    3.0
		 * @return   null
		*/
    _options: function ( key ) {
	    return this.settings[key];
    },

		/**
		 * Setup triggers
		 *
		 * @since  	3.0
		 * @return 	null
		*/
    trigger: function ( fn, customParams ) {
	    var params = [this.settings]; 
	    
	    if ( customParams ) {
		    params = customParams;
	    }

	    this.$elmt.trigger( 'ditty_display_editor_panel_' + fn, params );
	
	    if ( typeof this.settings[fn] === 'function' ) {
	      this.settings[fn].apply( this.$elmt, params );
	    }
    },
		
		
		/**
		 * Allow settings to be modified
		 *
		 * @since  	3.0
		 * @return 	null
		*/
    options: function ( key, value ) {

	    if ( typeof key === 'object' ) {
	      this.settings = $.extend( {}, defaults, $.ditty_display_editor_panel.defaults, key );
	    } else if ( typeof key === 'string' ) {
        if ( value === undefined ) {
	        return this.settings[key];
        }
        this.settings[key] = value;
	    } else {
        return this.settings;
	    }

	    this.trigger( 'options_update' );
    },
		
		
		/**
		 * Destroy the editor
		 *
		 * @since  	3.0
		 * @return 	null
		*/
    destroy: function () {
			
			this.trigger( 'destroy', [this] ); 

	    // Remove actions
			this.$importExportUpdate.off( 'click', { this: this }, this._importUpdate );
			this.settings.editor.$elmt.off( 'ditty_editor_add_drafts', { self: this }, this._addDrafts );
	    this.settings.editor.$elmt.off( 'ditty_editor_save_drafts', { self: this }, this._saveDrafts );
 		 	this.$form.off( 'submit', { this: this }, this._submitForm );
	    this.$back.off( 'click', { this: this }, this._cancel_click );  
	    this.$elmt.off( 'change', 'input[type="text"], input[type="number"]', { self: this }, this._textfieldListeners );
			this.$form.off( 'click', 'input[type="radio"]', { self: this }, this._radioListeners );
			this.$form.off( 'click', 'input[type="checkbox"]', { self: this }, this._checkboxListeners );
			this.$form.off( 'change', 'select', { self: this }, this._selectListeners );
			this.$form.off( 'ditty_field_clone_update', { self: this }, this._cloneListeners );
	    
	    this.elmt._ditty_display_editor_panel = null;	    
    }
  };

	
	/**
	 * Create the data list
	 *
	 * @since  	3.0
	 * @return 	null
	*/
  $.fn.ditty_display_editor_panel = function( options ) {
    var args = arguments,
        error = false,
        returns;

    if ( options === undefined || typeof options === 'object' ) {
      return this.each( function () {
        if ( ! this._ditty_display_editor_panel ) {
        	this._ditty_display_editor_panel = new Ditty_Display_Editor_Panel( this, options );
        }
      });
    } else if ( typeof options === 'string' ) {
      this.each( function () {
        var instance = this._ditty_display_editor_panel;

        if ( ! instance ) {
          throw new Error( 'No Ditty_Display_Editor_Panel applied to this element.' );
        }
        if ( typeof instance[options] === 'function' && options[0] !== '_' ) {
          returns = instance[options].apply( instance, [].slice.call( args, 1 ) );
        } else {
          error = true;
        }
      } );

      if ( error ) {
        throw new Error( 'No method "' + options + '" in Ditty_Display_Editor_Panel.' );
      }

      return returns !== undefined ? returns : this;
    }
  };

  $.ditty_display_editor_panel = {};
  $.ditty_display_editor_panel.defaults = defaults;

} )( jQuery );


/**
 * Ditty Layout Variations Panel
 *
 * @since		3.0
 * @return	null
*/
( function ( $ ) {
	'use strict';

	var defaults = {
		editor: null
	};

	var Ditty_Layout_Variations_Panel = function ( elmt, options ) {
		this.elmt         			= elmt;
		this.settings     			= $.extend( {}, defaults, $.ditty_layout_variations_panel.defaults, options );
		this.$elmt        			= $( elmt );
		this.$back							= this.$elmt.find( '.ditty-editor-options__back' );
		this.$list							= $( elmt ).find( '.ditty-data-list__items' );
		this.$editorItem 				= dittyVars.editor.currentItem;
		this.editorItemLabel		= this.$editorItem.find( '.ditty-data-list__item__label' ).text();
		this.editorDittyId			= this.$editorItem.data( 'ditty_id' );
		this.editorItemId				= this.$editorItem.data( 'item_id' );
		this.editorItemType			= this.$editorItem.data( 'item_type' );

		this._init();
	};


	Ditty_Layout_Variations_Panel.prototype = {

		/**
		 * Initialize the panel
		 *
		 * @since		3.0
		 * @return	null
		*/
		_init: function () {
			this.$elmt.addClass( 'init' );
			
			// Add actions
			this.$back.on( 'click', { self: this }, this._backClick );
			this.$elmt.on( 'click', '.ditty-layout-variation__change', { self: this }, this._changeTemplate );
			this.$elmt.on( 'click', '.ditty-layout-variation__edit_html', { self: this, editType: 'html' }, this._editLayout );
			this.$elmt.on( 'click', '.ditty-layout-variation__edit_css', { self: this, editType: 'css' }, this._editLayout );
			$( 'body' ).on( 'ditty_editor_save_ditty_response', { self: this }, this._dittyEditorSaveResponse );
		},
		
		/**
		 * Return to the item list
		 *
		 * @since    3.0
		 * @return   null
		*/
		_showItemList: function() {
			this.settings.editor.$panels.ditty_slider( 'options', 'transition', 'slideRight' );
			this.settings.editor.$panels.ditty_slider( 'showSlideById', 'items' );
		},
		
		/**
		 * Cancel click
		 *
		 * @since    3.0
		 * @return   null
		*/
		_backClick: function( e ) {
			e.preventDefault();
			var self = e.data.self;
			self._showItemList();
		},
		
		/**
		 * Update new item ids on save
		 *
		 * @since    3.0
		 * @return   null
		*/
		_dittyEditorSaveResponse: function( e, response ) {
			var self = e.data.self;
			if ( response.ditty_new_layout_ids ) {
				$.each( response.ditty_new_layout_ids, function( draftId, newId ) {
					var $variationItem = $( '.ditty-layout-variation[data-layout_id="' + draftId + '"]' );
					if ( $variationItem.length ) {
						$variationItem.attr( 'data-layout_id', newId ).data( 'layout_id', newId );
					}
				} );
			}
		},

		/**
		 * Load a new layout
		 *
		 * @since    3.0
		 * @return   null
		*/
		_changeTemplate: function( e ) { 
			e.preventDefault();
			var self = e.data.self;

			var $button 					= $( e.target ).is( 'a' ) ? $( e.target ) : $( e.target ).parent( 'a' ),
					$layoutVariation 	= $button.parents( '.ditty-data-list__item' ),
					layoutId					= $layoutVariation.data( 'layout_id' ),
					variationId 			= $layoutVariation.data( 'layout_variation_id' ),
					variationLabel 		= $layoutVariation.data( 'layout_variation_label' );

			dittyVars.editor.currentLayoutVariation = $layoutVariation; // Set the current layout variation
					
			self.settings.editor.updateStart(); // Start the update overlay
			$layoutVariation.addClass( 'editing' );

			// Load the item fields		
			var data = {
				action					: 'ditty_editor_layouts',
				ditty_id				: self.editorDittyId,
				item_type				: self.editorItemType,
				variation_id		: variationId,
				variation_label	: variationLabel,
				layout_id				: layoutId,
				draft_values		: self.settings.editor.getDraftValues(),
				security				: dittyVars.security
			};
			$.post( dittyVars.ajaxurl, data, function( response ) {
				if ( response ) {
					var html = '<div class="ditty-editor__panel ditty-editor__panel--layouts">' + response + '</div>';		
					self.settings.editor.panelOptions( 'transition', 'slideLeft' );
					self.settings.editor.showPanel( 'layouts', html );
				}
			} );	
		},
	
		/**
		 * Edit the html or css of a layout
		 *
		 * @since    3.0.12
		 * @return   null
		*/
		_editLayout: function( e ) { 
			e.preventDefault();
			var self 							= e.data.self,
					editType 					= e.data.editType,
					$button 					= $( e.target ).is( 'a' ) ? $( e.target ) : $( e.target ).parent( 'a' ),
					$layoutVariation 	= $button.parents( '.ditty-data-list__item' ),
					layoutId 					= $layoutVariation.data( 'layout_id' ),
					itemType					= $layoutVariation.data( 'item_type' );
					
			dittyVars.editor.currentLayoutVariation = $layoutVariation; // Set the current layout variation
			
			self.settings.editor.updateStart(); // Start the update overlay
			self.$list.find( '.ditty-data-list__item' ).removeClass( 'editing' );
			$layoutVariation.addClass( 'editing' );

			var itemIds = [],
					items = self.settings.editor.ditty.options( 'items' );
			
			$.each( items, function( index, item ) {
				itemIds.push( item.uniqId );
			} ); 

			// Load the new display fields		
			var data = {
				action				: 'ditty_editor_layout_fields',
				layout_id			: layoutId,
				item_type			: itemType,
				item_value		: self.$editorItem.data( 'item_value' ),
				ditty_id			: self.editorDittyId,
				item_id				: self.editorItemId,
				item_ids			: itemIds,
				edit_type			: editType,
				draft_values	: self.settings.editor.getDraftValues(),
				security			: dittyVars.security
			};
			$.post( dittyVars.ajaxurl, data, function( response ) {
				if ( response ) {
					var slideId = 'layout_' + editType + '_editor',
							html = '<div class="ditty-editor__panel ditty-editor__panel--' + slideId + '">' + response.form + '</div>';
					
					self.settings.editor.panelOptions( 'transition', 'slideLeft' );
					self.settings.editor.showPanel( slideId, html );
				}
			}, 'json' );
		}, 

		/**
		 * Do actions when panel is visible
		 *
		 * @since  	3.0
		 * @return 	null
		*/
		panelVisible: function () {
			this.$list.find( '.ditty-layout-variation' ).removeClass( 'editing' );
		},

		/**
		 * Setup triggers
		 *
		 * @since  	3.0
		 * @return 	null
		*/
		trigger: function ( fn, customParams ) {
			var params = [this.settings];  
			if ( customParams ) {
				params = customParams;
			}

			this.$elmt.trigger( 'ditty_layout_variations_panel_' + fn, params );
			if ( typeof this.settings[fn] === 'function' ) {
				this.settings[fn].apply( this.$elmt, params );
			}
		},	
		
		/**
		 * Allow settings to be modified
		 *
		 * @since  	3.0
		 * @return 	null
		*/
		options: function ( key, value ) {
			if ( typeof key === 'object' ) {
				this.settings = $.extend( {}, defaults, $.ditty_layout_variations_panel.defaults, key );
			} else if ( typeof key === 'string' ) {
				if ( value === undefined ) {
					return this.settings[key];
				}
				this.settings[key] = value;
			} else {
				return this.settings;
			}

			this.trigger( 'options_update' );
		},
		
		/**
		 * Destroy the editor
		 *
		 * @since  	3.0
		 * @return 	null
		*/
		destroy: function () {
			this.$elmt.removeClass( 'init' );
			this.$back.off( 'click', { self: this }, this._backClick );
			this.$elmt.off( 'click', '.ditty-layout-variation__change', { self: this }, this._changeTemplate );
			this.$elmt.off( 'click', '.ditty-layout-variation__edit_html', { self: this, editType: 'html' }, this._editLayout );
			this.$elmt.off( 'click', '.ditty-layout-variation__edit_css', { self: this, editType: 'css' }, this._editLayout );
			$( 'body' ).off( 'ditty_editor_save_ditty_response', { self: this }, this._dittyEditorSaveResponse );
			
			this.elmt._ditty_layout_variations_panel = null;
		}
	};

	/**
	 * Create the data list
	 *
	 * @since  	3.0
	 * @return 	null
	*/
	$.fn.ditty_layout_variations_panel = function( options ) {
		var args = arguments,
				error = false,
				returns;

		if ( options === undefined || typeof options === 'object' ) {
			return this.each( function () {
				if ( ! this._ditty_layout_variations_panel ) {
					this._ditty_layout_variations_panel = new Ditty_Layout_Variations_Panel( this, options );
				}
			});
		} else if ( typeof options === 'string' ) {
			this.each( function () {
				var instance = this._ditty_layout_variations_panel;

				if ( ! instance ) {
					throw new Error( 'No Ditty_Layout_Variations_Panel applied to this element.' );
				}
				if ( typeof instance[options] === 'function' && options[0] !== '_' ) {
					returns = instance[options].apply( instance, [].slice.call( args, 1 ) );
				} else {
					error = true;
				}
			} );

			if ( error ) {
				throw new Error( 'No method "' + options + '" in Ditty_Layout_Variations_Panel.' );
			}

			return returns !== undefined ? returns : this;
		}
	};

	$.ditty_layout_variations_panel = {};
	$.ditty_layout_variations_panel.defaults = defaults;

} )( jQuery );

/**
 * Ditty Layouts Panel
 *
 * @since		3.0
 * @return	null
*/
( function ( $ ) {
  'use strict';

  var defaults = {
	  editor: null
  };

  var Ditty_Layouts_Panel = function ( elmt, options ) {
    this.elmt         			= elmt;
    this.settings     			= $.extend( {}, defaults, $.ditty_layouts_panel.defaults, options );
    this.$elmt        			= $( elmt );
    this.$back							= this.$elmt.find( '.ditty-editor-options__back' );
    this.$list							= $( elmt ).find( '.ditty-data-list__items' );
		this.$editorItem 				= dittyVars.editor.currentItem;
    this.editorDittyId			= this.$editorItem.data( 'ditty_id' );
    this.editorItemId				= this.$editorItem.data( 'item_id' );
		this.editorItemtype			= this.$editorItem.data( 'item_type' );
    this.$editorVariation 	= dittyVars.editor.currentLayoutVariation;
    this.editorVariationId	= this.$editorVariation.data( 'layout_variation_id' );
    this.editorLayoutId			= this.$editorVariation.data( 'layout_id' );
    this._init();
  };


  Ditty_Layouts_Panel.prototype = {

    /**
		 * Initialize the panel
		 *
		 * @since		3.0
		 * @return	null
		*/
    _init: function () {
	    this.$elmt.addClass( 'init' );
	    
			// Add actions
	    this.$back.on( 'click', { self: this }, this._backClick );
	    this.$elmt.on( 'click', '.ditty-data-list__item', { self: this }, this._selectLayout );
	    this.$elmt.on( 'click', '.ditty-data-list__item__edit_html', { self: this, editType: 'html' }, this._editLayout );
	    this.$elmt.on( 'click', '.ditty-data-list__item__edit_css', { self: this, editType: 'css' }, this._editLayout );
	    this.$elmt.on( 'click', '.ditty-data-list__item__clone', { self: this }, this._cloneLayout );
	    this.$elmt.on( 'click', '.ditty-data-list__item__delete', { self: this }, this._deleteLayout );
			this.$list.on( 'click', '.ditty-editor-layout > a', { self: this }, this._actionClick );
			$( 'body' ).on( 'ditty_editor_save_ditty_response', { self: this }, this._dittyEditorSaveResponse );
	    
	    // Activate the current layout
	    this._activateLayout( this.$list.find( '#ditty-editor-layout--' + this.editorLayoutId ) );
    },

    /**
		 * Activate a layout
		 *
		 * @since		3.0
		 * @return	null
		*/
    _activateLayout: function ( $layout ) {
	    this.$list.find( '.ditty-editor-layout' ).removeClass( 'active' );
	    $layout.addClass( 'active' );
    },
    
    /**
     * Return to the item list
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _showVariationsList: function() {
			this.settings.editor.$panels.ditty_slider( 'options', 'transition', 'slideRight' );
			this.settings.editor.$panels.ditty_slider( 'showSlideById', 'layout_variations' );
    },
    
    /**
     * Cancel click
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _backClick: function( e ) {
		  e.preventDefault();
		  var self = e.data.self;
		  self._showVariationsList();
    },
		
		/**
		 * Update new item ids on save
		 *
		 * @since    3.0
		 * @return   null
		*/
		_dittyEditorSaveResponse: function( e, response ) {
			var self = e.data.self;
			if ( response.ditty_new_layout_ids ) {
				$.each( response.ditty_new_layout_ids, function( draftId, newId ) {
					var $editorItem = $( '#ditty-editor-layout--' + draftId );
					if ( $editorItem.length ) {
						$editorItem.attr( 'id', 'ditty-editor-layout--' + newId );
						$editorItem.attr( 'data-layout_id', newId ).data( 'layout_id', newId );
					}
				} );
			}
		},
		
		/**
		 * Update new layout ids on save
		 *
		 * @since    3.0
		 * @return   null
		*/
		// dittyUpdatedDraftLayouts: function( variationType, layoutId ) {
		// 	var self = this;
		// 	
		// 	$.each( $( '.ditty-editor-item' ), function() {
		// 		var itemID = $( this ).data( 'item_id' ),
		// 				itemType = $( this ).data( 'item_type' ),
		// 				layoutValue = $( this ).data( 'layout_value' );
		// 		$.each( layoutValue, function( type, id ) {
		// 			if ( String( itemType ) === String( self.editorItemtype ) && String( type ) === String( variationType ) ) {
		// 				layoutValue[type] = String( layoutId );
		// 				dittyDraftItemUpdateData( self, itemID, 'layout_value', layoutValue );
		// 			}
		// 		} );
		// 	} );
		// },

    /**
		 * Load a new layout
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _selectLayout: function( e ) { 
		  e.preventDefault();
		  var self = e.data.self;
		  if ( $( e.target ).parent().is( 'a' ) ) {
				return false;
			}
			
			var $layout 			= $( e.target ).is( '.ditty-data-list__item' ) ? $( e.target ) : $( e.target ).parents( '.ditty-data-list__item' ),
					layoutId 			= $layout.data( 'layout_id' ),
					layoutVersion	= $layout.data( 'layout_version' ),
					layoutValue 	= self.$editorItem.data( 'layout_value' );

			if ( $layout.hasClass( 'active' ) ) {
				return false;
			}
			$.each( layoutValue, function( type ) {
				if ( self.editorVariationId === type ) {
					layoutValue[type] = String( layoutId );
				}
			} );

			// Highlight the active layout
			self.settings.editor.updateStart(); // Start the update overlay
			//self.dittyUpdatedDraftLayouts( self.editorVariationId, layoutId );
			//dittyDraftItemUpdateData( self, self.editorItemId, 'layout_id', layoutId );
			dittyDraftItemUpdateData( self, self.editorItemId, 'layout_value', layoutValue );
			self._activateLayout( $layout );

			// Use ajax to load the new layout
			var data = {
				action				: 'ditty_editor_select_layout',
				layout_id			: layoutId,
				item_id				: self.editorItemId,
				ditty_id			: self.editorDittyId,
				draft_values 	: self.settings.editor.getDraftValues(),
				security			: dittyVars.security
			};
			$.post( dittyVars.ajaxurl, data, function( response ) {
				self.settings.editor.updateStop(); // Stop the update overlay
				if ( response.display_items ) {
					//self.settings.editor.ditty.updateItems( response.display_items, false, false, true );
					self.settings.editor.ditty.updateItems( response.display_items, self.editorItemId );
				}
				if ( response.editor_item ) {
					var $newEditorItem = $( response.editor_item );
					self.$editorItem.replaceWith( $newEditorItem );
				}

				// Update the current Ditty
				self.$editorItem.attr( 'data-layout_value', layoutValue ).data( 'layout_value', layoutValue );
				self.$editorVariation.attr( 'data-layout_id', layoutId ).data( 'layout_id', layoutId );
				self.$editorVariation.find( '.ditty-layout-variation__template > span' ).text( response.layout_label );
				if ( layoutVersion ) {
					self.$editorVariation.find( '.ditty-layout-variation__template > small' ).text( '(' + layoutVersion + ')' );
				} else {
					self.$editorVariation.find( '.ditty-layout-variation__template > small' ).text( '' );
				}
			}, 'json' );	
    },

		/**
		 * Clone a layout
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _cloneLayout: function( e ) { 
		  e.preventDefault();
		  var self 				= e.data.self,
		  		$button 		= $( e.target ).is( 'a' ) ? $( e.target ) : $( e.target ).parent( 'a' ),
					$item 			= $button.parents( '.ditty-data-list__item' ),
					layoutId 		= $item.data( 'layout_id' );
			
			self.settings.editor.updateStart(); // Start the update overlay
			
			// Use ajax to clone the layout
			var data = {
				action				: 'ditty_editor_layout_clone',
				layout_id			: layoutId,
				draft_values	: self.settings.editor.getDraftValues(),
				security			: dittyVars.security
			};
			$.post( dittyVars.ajaxurl, data, function( response ) {
				if ( response.editor_layout ) {
					var $new = $( response.editor_layout );
			    $new.hide();
			    $item.after( $new );
			    $new.slideDown();
		    }
				if ( response.draft_id && response.draft_meta ) {
					dittyDraftLayoutUpdate( self, response.draft_id, null, response.draft_meta );
				}
		    self.settings.editor.updateStop(); // Stop the update overlay
			}, 'json' );
		},

		/**
		 * Delete a layout
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _deleteLayout: function( e ) { 
		  e.preventDefault();

		  var self 			= e.data.self,
		  		$button 	= $( e.target ).is( 'a' ) ? $( e.target ) : $( e.target ).parent( 'a' ),
					$item 		= $button.parents( '.ditty-data-list__item' ),
					$nextItem	= null,
					layoutId 	= $item.data( 'layout_id' );

			// Find the layout to load if this one is active
			if ( $item.hasClass( 'active' ) ) {
				if ( $item.prev().length ) {
					$nextItem = $item.prev();
				} else if ( $item.next().length ) {
					$nextItem = $item.next();
				}
			}
			
			// Remove the layout
			$item.slideUp( function() {
				$( this ).remove();
			} );
			dittyDraftLayoutDelete( self, layoutId );
			
			// Possibly select another layout
			if ( null !== $nextItem ) { 
				$nextItem.trigger( 'click' );
			}
		},
  
    /**
		 * Edit the html or css of a layout
		 *
		 * @since    3.0
		 * @return   null
		*/
	  _editLayout: function( e ) { 
		  e.preventDefault();
		  var self 				= e.data.self,
		  		editType 		= e.data.editType,
		  		$button 		= $( e.target ).is( 'a' ) ? $( e.target ) : $( e.target ).parent( 'a' ),
					$layout 		= $button.parents( '.ditty-data-list__item' ),
					layoutId 		= $layout.data( 'layout_id' );
					
			self.settings.editor.updateStart(); // Start the update overlay
			self.$list.find( '.ditty-data-list__item' ).removeClass( 'editing' );
			$layout.addClass( 'editing' );
			
			// Load the new display fields		
			var data = {
				action				: 'ditty_editor_layout_fields',
				layout_id			: layoutId,
				item_id				: self.editorItemId,
				edit_type			: editType,
				draft_values	: self.settings.editor.getDraftValues(),
				security			: dittyVars.security
			};
			$.post( dittyVars.ajaxurl, data, function( response ) {
				if ( response ) {
					var slideId = 'layout_' + editType + '_editor',
							html = '<div class="ditty-editor__panel ditty-editor__panel--' + slideId + '">' + response.form + '</div>';
					
					self.settings.editor.panelOptions( 'transition', 'slideLeft' );
					self.settings.editor.showPanel( slideId, html );
				}
			}, 'json' );
		},  
		
		/**
		 * Trigger an actions when a button is clicked
		 *
		 * @since    3.0
		 * @return   null
		*/
		_actionClick: function( e ) { 
			e.preventDefault();
			var self 				= e.data.self,
					$button 		= $( e.target ).is( 'a' ) ? $( e.target ) : $( e.target ).parent( 'a' ),
					$layout 		= $button.parents( '.ditty-data-list__item' ),
					layoutId 		= $layout.data( 'layout_id' );
					
			dittyVars.editor.currentLayout = $layout; // Set the current layout

			$( 'body' ).trigger( 'ditty_editor_layout_action_click', [$button, $layout, layoutId, self.editorDittyId, self.settings.editor] );
		},

		/**
		 * Setup triggers
		 *
		 * @since  	3.0
		 * @return 	null
		*/
    trigger: function ( fn, customParams ) {
	    var params = [this.settings]; 
	    if ( customParams ) {
		    params = customParams;
	    }

	    this.$elmt.trigger( 'ditty_layouts_panel_' + fn, params );
	    if ( typeof this.settings[fn] === 'function' ) {
	      this.settings[fn].apply( this.$elmt, params );
	    }
    },	
		
		/**
		 * Allow settings to be modified
		 *
		 * @since  	3.0
		 * @return 	null
		*/
    options: function ( key, value ) {
	    if ( typeof key === 'object' ) {
	      this.settings = $.extend( {}, defaults, $.ditty_layouts_panel.defaults, key );
	    } else if ( typeof key === 'string' ) {
        if ( value === undefined ) {
	        return this.settings[key];
        }
        this.settings[key] = value;
	    } else {
        return this.settings;
	    }

	    this.trigger( 'options_update' );
    },
		
		
		/**
		 * Destroy the editor
		 *
		 * @since  	3.0
		 * @return 	null
		*/
    destroy: function () {
	    
	    // Remove the init class
	    this.$elmt.removeClass( 'init' );

			// Remove actions
			this.$back.off( 'click', { self: this }, this._backClick );
	    this.$elmt.off( 'click', '.ditty-data-list__item', { self: this }, this._selectLayout );
			this.$elmt.off( 'click', '.ditty-data-list__item__edit_html', { self: this, editType: 'html' }, this._editLayout );
			this.$elmt.off( 'click', '.ditty-data-list__item__edit_css', { self: this, editType: 'css' }, this._editLayout );
			this.$elmt.off( 'click', '.ditty-data-list__item__clone', { self: this }, this._cloneLayout );
			this.$elmt.off( 'click', '.ditty-data-list__item__delete', { self: this }, this._deleteLayout );
			this.$list.off( 'click', '.ditty-editor-layout > a', { self: this }, this._actionClick );
			$( 'body' ).off( 'ditty_editor_save_ditty_response', { self: this }, this._dittyEditorSaveResponse );

	    this.elmt._ditty_layouts_panel = null;
    }
  };

	/**
	 * Create the data list
	 *
	 * @since  	3.0
	 * @return 	null
	*/
  $.fn.ditty_layouts_panel = function( options ) {
    var args = arguments,
        error = false,
        returns;

    if ( options === undefined || typeof options === 'object' ) {
      return this.each( function () {
        if ( ! this._ditty_layouts_panel ) {
        	this._ditty_layouts_panel = new Ditty_Layouts_Panel( this, options );
        }
      });
    } else if ( typeof options === 'string' ) {
      this.each( function () {
        var instance = this._ditty_layouts_panel;

        if ( ! instance ) {
          throw new Error( 'No Ditty_Layouts_Panel applied to this element.' );
        }
        if ( typeof instance[options] === 'function' && options[0] !== '_' ) {
          returns = instance[options].apply( instance, [].slice.call( args, 1 ) );
        } else {
          error = true;
        }
      } );

      if ( error ) {
        throw new Error( 'No method "' + options + '" in Ditty_Layouts_Panel.' );
      }

      return returns !== undefined ? returns : this;
    }
  };

  $.ditty_layouts_panel = {};
  $.ditty_layouts_panel.defaults = defaults;

} )( jQuery );


/* global wp:true */
/* global _:true */

/**
 * Ditty Layout HTML Editor Panel
 * @since		3.0
 * @return	null
*/

(function ($) {
  'use strict';

  var defaults = {
	  editor 			: null,
	  prevPanel 	: ''
  };

  var Ditty_Layout_Html_Editor_Panel = function ( elmt, options ) {
	  
    this.elmt         								= elmt;
    this.settings     								= $.extend( {}, defaults, $.ditty_layout_html_editor_panel.defaults, options );
    this.$elmt        								= $( elmt );
    this.$form												= this.$elmt.find( '.ditty-editor-options' );
    this.$textarea										= this.$elmt.find( '.ditty-editor-options__code' );
    this.$back												= this.$elmt.find( '.ditty-editor-options__back' );
    this.$preview											= this.$elmt.find( '.ditty-editor-options__preview' );
    this.$editCss											= this.$elmt.find( '.ditty-editor-options__edit-css' );
    this.$title												= this.$elmt.find( '.ditty-editor-options__title' );
    this.$tags												= this.$elmt.find( '.ditty-editor-options__tags' );
    this.itemType											= this.$form.data( 'item_type' );
    this.layoutId											= this.$form.data( 'layout_id' );
    this.$editorItem 									= dittyVars.editor.currentItem;
    this.$editorLayout 								= dittyVars.editor.currentLayout;
    this.$editorLayoutTitle						= this.$editorLayout ? this.$editorLayout.find( '.ditty-data-list__item__label' ) : false;
		this.$editorLayoutVariation 			= dittyVars.editor.currentLayoutVariation;
		this.$editorLayoutVariationTitle	= this.$editorLayoutVariation.find( '.ditty-layout-variation__template span' );
    this.editorDittyId								= this.$editorItem.data( 'ditty_id' );
    this.editorItemId									= this.$editorItem.data( 'item_id' );
    this.codeEditor										= null;
    this.codeHasUpdates 							= false;
    this.initData											= null;
    this.afterUpdateAction						= '';	
    this._init();
  };


  Ditty_Layout_Html_Editor_Panel.prototype = {

    /**
		 * Initialize the data list
		 * @since		3.0
		 * @return	null
		*/
    _init: function () {

      // Save the initial data
	    this.initData = this.$form.serialize();

      // Initialize dynamic fields
      this._initEditor();
      
      // Add actions
	    this.$back.on( 'click', { self: this }, this._backClick );
	    this.$preview.on( 'click', { self: this }, this._previewClick );
	    this.$editCss.on( 'click', { self: this }, this._editCss );
	    this.$form.on( 'submit', { self: this }, this._submitForm );
	    this.$form.on( 'click', '.ditty-editor-options__tag', { self: this }, this._insertTag );
	    this.$title.on( 'keyup', { self: this }, this._titleUpdate );
	    this.settings.editor.$elmt.on( 'ditty_editor_add_drafts', { self: this }, this._addDrafts );
			this.settings.editor.$elmt.on( 'ditty_editor_save_drafts', { self: this }, this._saveDrafts );
    },
		
		/**
     * Return to the previous panel
		 * @since    3.0
		 * @return   null
		*/
	  _showPrevPanel: function() {
			this.settings.editor.$panels.ditty_slider( 'options', 'transition', 'slideRight' );
			this.settings.editor.$panels.ditty_slider( 'showSlideById', this.settings.prevPanel );
    },
    
    /**
     * Editor updated listener
		 * @since    3.0
		 * @return   null
		*/
	  _titleUpdate: function( e ) {
		  var self = e.data.self;	
			self.settings.editor.addUpdate( 'layoutUpdate', self.layoutId );
    },
    
    /**
     * Preview button add updates class
		 * @since    3.0
		 * @return   null
		*/
	  _enablePreviewButton: function() {
		  this.$preview.addClass( 'ditty-has-updates' );
    },
    
    /**
     * Preview button remove updates class
		 * @since    3.0
		 * @return   null
		*/
	  _disablePreviewButton: function() {
		  this.$preview.removeClass( 'ditty-has-updates' );
		  this.$preview.children( 'i' ).attr( 'class', this.$preview.children( 'i' ).data( 'class' ) );
    },
    
    /**
     * Return item ids of current layout
		 * @since    3.0
		 * @return   null
		*/    
    _getLayoutItems: function() {
		  var items = this.settings.editor.ditty.options( 'items' ),
		  		itemIds = [];
		  		
		  $.each( items, function( key, value ) {
			  if ( String( value.layoutId ) === String( this.layoutId ) ) {
				  itemIds.push( value.id );
				}
			} ); 
		  return itemIds;
    },
    
    /**
     * Editor tabs listener
		 * @since    3.0
		 * @return   null
		*/
	  _addDrafts: function( e ) {
		  var self = e.data.self;
		  self.codeEditor.codemirror.save();
		  
		  var currentData = self.$form.serialize();
		  if ( currentData !== self.initData || self.codeHasUpdates ) {
			  self.$form.trigger( 'submit' );
		  }	
    },
		
		/**
		 * Editor updated listener
		 * @since    3.0
		 * @return   null
		*/
		_saveDrafts: function( e ) {
			var self = e.data.self;
			self.codeEditor.codemirror.save();
			
			var currentData = self.$form.serialize();
			if ( currentData !== self.initData || self.codeHasUpdates ) {
				self.afterUpdateAction = 'save';
				self.$form.trigger( 'submit' );
			}	
		},

    /**
     * Back click
		 * @since    3.0
		 * @return   null
		*/    
    _backClick: function( e ) {
		  e.preventDefault();
		  var self = e.data.self;
		  
		  self.codeEditor.codemirror.save();
		  var currentData = self.$form.serialize();

		  if ( currentData !== self.initData || self.codeHasUpdates ) {
			  self.afterUpdateAction = 'return';
			  self.$form.trigger( 'submit' );
		  }	else {
			  self._showPrevPanel();
		  }
    },

    /**
     * Preview any changes
		 * @since    3.0
		 * @return   null
		*/
	  _previewClick: function( e ) {
		  e.preventDefault();
		  var self 	= e.data.self;

		  self.codeEditor.codemirror.save(); // Update the textarea	  
		  var currentData = self.$form.serialize();
	
		  if ( currentData !== self.initData || self.codeHasUpdates ) {  
			  self.$preview.children( 'i' ).attr( 'class', dittyVars.updateIcon );
			  self.$form.trigger( 'submit' ); 
		  }
    },
    
    /**
		 * Edit the css of the layout
		 * @since    3.0
		 * @return   null
		*/
	  _editCss: function( e ) { 
		  e.preventDefault();
		  var self 				= e.data.self,
					panelId		= 'layout_css_editor';
			
			self.settings.editor.updateStart(); // Start the update overlay
			self.codeEditor.codemirror.save(); // Update the textarea	  
		  var currentData = self.$form.serialize();
		  if ( currentData !== self.initData || self.codeHasUpdates ) {  
			  self.$preview.children( 'i' ).attr( 'class', dittyVars.updateIcon );
			  self.$form.trigger( 'submit' ); 
		  }
		  
		  // Show the panel if it exists
		  if ( self.settings.editor.panelExists( panelId ) ) {
				self.settings.editor.$elmt.find( '.ditty-editor__panel--layout_css_editor input.ditty-editor-options__title' ).val( self.$title.val() );
			  self.settings.editor.panelOptions( 'transition', 'fade' );
				self.settings.editor.showPanel( panelId );
			  
			// Else, load the new panel and show
		  } else {		
				var data = {
					action				: 'ditty_editor_layout_fields',
					layout_id			: self.layoutId,
					layout_title	: self.$title.val(),
					ditty_id			: self.editorDittyId,
					item_id				: self.editorItemId,
					item_type			: self.itemType,
					edit_type			: 'css',
					draft_values 	: self.settings.editor.getDraftValues(),
					security			: dittyVars.security
				};
				$.post( dittyVars.ajaxurl, data, function( response ) {
					if ( response ) {
						var html = '<div class="ditty-editor__panel ditty-editor__panel--' + panelId + '">' + response.form + '</div>';
						self.settings.editor.panelOptions( 'transition', 'fade' );
						self.settings.editor.showPanel( panelId, html );
					}
				}, 'json' );
			}
		},  
    
    /**
		 * Submit updates
		 * @since    3.0
		 * @return   null
		*/
	  _submitForm: function( e ) {
		  e.preventDefault();
		  
		  var self 				= e.data.self,
		  		layoutId 		= self.layoutId,
		  		itemType 		= self.itemType,
		  		itemIds			= self._getLayoutItems();
		  		
		  if ( self.$form.hasClass( 'ditty-editor-has-errors' ) ) {
			  return false;
		  }
		 
		  self.codeEditor.codemirror.save(); // Update the textarea
		  self.settings.editor.updateStart(); // Start the update overlay
		  
		  var data = {
        action				: 'ditty_editor_layout_update',
        layout_id 		: layoutId,
        item_type 		: itemType,
        item_ids			: itemIds,
        edit_type			: 'html',
				draft_values 	: self.settings.editor.getDraftValues(),
        security			: dittyVars.security
	    };
		  self.$form.ajaxSubmit({
		    url				: dittyVars.ajaxurl,
				type			: 'post',
				dataType	: 'json',
				data			: data,
        success		: function( response ) {
	        self.initData = self.$form.serialize();
	        self._disablePreviewButton();
	        
					// Update labels
	        if ( response.label ) {
						if ( self.$editorLayoutTitle ) {
							self.$editorLayoutTitle.html( response.label );
						}
						self.$editorLayoutVariationTitle.html( response.label );
					}
					// Remove the template version numbers
					if ( self.$editorLayoutTitle ) {
						self.$editorLayoutTitle.find( '.ditty-layout-version' ).remove();
					}
					if ( self.$editorLayoutVariationTitle ) {
						self.$editorLayoutVariationTitle.find( '.ditty-layout-version' ).remove();
					}
					
					if ( response.display_items ) {
		        self.settings.editor.ditty.updateItems( response.display_items, false, false, true );
	        }
					if ( response.draft_id && response.draft_meta ) {
						dittyDraftLayoutUpdate( self, response.draft_id, null, response.draft_meta );
					}

					self.codeHasUpdates = false;
					self.settings.editor.updateStop(); // Stop the update overlay
					self.settings.editor.delayedSubmitDisable(); // Remove the delayed submit since we just submitted
					
					if ( 'return' === self.afterUpdateAction ) {
						self._showPrevPanel(); // Show the items list
					}
					if ( 'save' === self.afterUpdateAction ) {
						self.settings.editor.saveDitty( { return_items: 0 } ); // Update the ticker
					}
					self.afterUpdateAction = '';
        }
	    } ); 
    },
    
    /**
     * Initialize the editor
		 * @since    3.0
		 * @return   null
		*/
	  _initEditor: function() {
		  var self = this,
		  		codeEditorSettings = wp.codeEditor.defaultSettings ? _.clone( wp.codeEditor.defaultSettings ) : {};
	    
			codeEditorSettings.codemirror = _.extend(
	      {},
	      codeEditorSettings.codemirror,
	      {
	        indentUnit	: 2,
	        tabSize			: 2
	      }
	    );
	    this.codeEditor = wp.codeEditor.initialize( this.$textarea[0], codeEditorSettings );
	    this.codeEditor.codemirror.on( 'change', function() {
		    self.codeEditor.codemirror.save();
		    self.settings.editor.addUpdate( 'layout_html_update', self.layoutId );
				self.codeHasUpdates = true;
				self._enablePreviewButton();
				self.settings.editor.delayedSubmitEnable(); // Enable the delayed submit since we have changes
			} );
    },

    /**
     * Insert a tag
		 * @since    3.0
		 * @return   null
		*/
	  _insertTag: function( e ) {
		  var self 		= e.data.self,
		  		$tag		= $( e.target ),
		  		text		= $tag.text(),
					atts		= $tag.data( 'atts' ),
		  		cursor 	= self.codeEditor.codemirror.getCursor();
					
			if ( e.shiftKey && atts ) {
				var attsString = '',
						insertPoint = text.length - 1;
						
				$.each( atts, function( key, value ) {
					attsString += ' ' + key + '="' + value.toString() + '"';
				} );
				text = text.substring( 0, insertPoint ) + attsString + text.substring( insertPoint );
			} 	
			self.codeEditor.codemirror.replaceRange( text, cursor );

			// Move the cursor position
			cursor.ch = cursor.ch + text.length;
			self.codeEditor.codemirror.setCursor( cursor );
    },

	  /**
		 * Return a specific setting
		 * @since    3.0
		 * @return   null
		*/
    _options: function ( key ) {
	    return this.settings[key];
    },
    
		/**
		 * Setup triggers
		 * @since  	3.0
		 * @return 	null
		*/
    trigger: function ( fn, customParams ) {
	    var params = [this.settings]; 
	    if ( customParams ) {
		    params = customParams;
	    }

	    this.$elmt.trigger( 'ditty_layout_html_editor_panel_' + fn, params );
	
	    if ( typeof this.settings[fn] === 'function' ) {
	      this.settings[fn].apply( this.$elmt, params );
	    }
    },
		
		/**
		 * Allow settings to be modified
		 * @since  	3.0
		 * @return 	null
		*/
    options: function ( key, value ) {
	    if ( typeof key === 'object' ) {
	      this.settings = $.extend( {}, defaults, $.ditty_layout_html_editor_panel.defaults, key );
	    } else if ( typeof key === 'string' ) {
        if ( value === undefined ) {
	        return this.settings[key];
        }
        this.settings[key] = value;
	    } else {
        return this.settings;
	    }
	    this.trigger( 'options_update' );
    },

		/**
		 * Destroy the class
		 * @since  	3.0
		 * @return 	null
		*/
    destroy: function () {
	    this.$back.off( 'click', { self: this }, this._backClick );
	    this.$preview.off( 'click', { self: this }, this._previewClick );
	    this.$editCss.off( 'click', { self: this }, this._editCss );
	    this.$form.off( 'submit', { self: this }, this._submitForm );
	    this.$form.off( 'click', '.ditty-editor-options__tag', { self: this }, this._insertTag );
	    this.$title.off( 'keyup', { self: this }, this._titleUpdate );
			this.settings.editor.$elmt.off( 'ditty_editor_add_drafts', { self: this }, this._addDrafts );
	    this.settings.editor.$elmt.off( 'ditty_editor_save_drafts', { self: this }, this._saveDrafts );
			this.codeEditor.codemirror.off( 'change' );
	    this.codeEditor.codemirror.toTextArea();
	    
	    this.elmt._ditty_layout_html_editor_panel = null;	    
    }
  };

	/**
	 * Create the data list
	 * @since  	3.0
	 * @return 	null
	*/
  $.fn.ditty_layout_html_editor_panel = function( options ) {
    var args = arguments,
        error = false,
        returns;

    if ( options === undefined || typeof options === 'object' ) {
      return this.each( function () {
        if ( ! this._ditty_layout_html_editor_panel ) {
        	this._ditty_layout_html_editor_panel = new Ditty_Layout_Html_Editor_Panel( this, options );
        }
      });
    } else if ( typeof options === 'string' ) {
      this.each( function () {
        var instance = this._ditty_layout_html_editor_panel;

        if ( ! instance ) {
          throw new Error( 'No Ditty_Layout_Html_Editor_Panel applied to this element.' );
        }
        if ( typeof instance[options] === 'function' && options[0] !== '_' ) {
          returns = instance[options].apply( instance, [].slice.call( args, 1 ) );
        } else {
          error = true;
        }
      } );

      if ( error ) {
        throw new Error( 'No method "' + options + '" in Ditty_Layout_Html_Editor_Panel.' );
      }

      return returns !== undefined ? returns : this;
    }
  };

  $.ditty_layout_html_editor_panel = {};
  $.ditty_layout_html_editor_panel.defaults = defaults;

} )( jQuery );


/* global dittyLayoutCss:true */

/**
 * Ditty Layout CSS Editor Panel
 * @since		3.0
 * @return	null
*/

(function ($) {
  'use strict';

  var defaults = {
	  editor 			: null,
	  prevPanel 	: ''
  };

  var Ditty_Layout_Css_Editor_Panel = function ( elmt, options ) {
	  
    this.elmt         								= elmt;
    this.settings     								= $.extend( {}, defaults, $.ditty_layout_css_editor_panel.defaults, options );
    this.$elmt        								= $( elmt );
    this.$form												= this.$elmt.find( '.ditty-editor-options' );
    this.$textarea										= this.$elmt.find( '.ditty-editor-options__code' );
    this.$back												= this.$elmt.find( '.ditty-editor-options__back' );
    this.$preview											= this.$elmt.find( '.ditty-editor-options__preview' );
    this.$editHtml										= this.$elmt.find( '.ditty-editor-options__edit-html' );
    this.$title												= this.$elmt.find( '.ditty-editor-options__title' );
		this.$body												= this.$elmt.find( '.ditty-editor-options__body' );
    this.$tags												= this.$elmt.find( '.ditty-editor-options__tags' );
    this.itemType											= this.$form.data( 'item_type' );
    this.layoutId											= this.$form.data( 'layout_id' );
    this.$editorItem 									= dittyVars.editor.currentItem;
    this.$editorLayout 								= dittyVars.editor.currentLayout;
    this.$editorLayoutTitle						= this.$editorLayout ? this.$editorLayout.find( '.ditty-data-list__item__label' ) : false;
		this.$editorLayoutVariation 			= dittyVars.editor.currentLayoutVariation;
		this.$editorLayoutVariationTitle	= this.$editorLayoutVariation.find( '.ditty-layout-variation__template span' );
    this.editorDittyId								= this.$editorItem.data( 'ditty_id' );
    this.editorItemId									= this.$editorItem.data( 'item_id' );
    this.itemSelector									= '';
    this.codeEditor										= null;
    this.codeHasUpdates 							= false;
    this.initData											= null;
    this.afterUpdateAction						= '';	
        
    this._init();
  };


  Ditty_Layout_Css_Editor_Panel.prototype = {

    /**
		 * Initialize the data list
		 * @since		3.0
		 * @return	null
		*/
    _init: function () {

      // Save the initial data
	    this.initData = this.$form.serialize();
	    
	    // Set the css item selector
	    this._setCssSelector();

      // Initialize dynamic fields
      this._initEditor();

      // Add actions
	    this.$back.on( 'click', { self: this }, this._backClick );
	    this.$preview.on( 'click', { self: this }, this._previewClick );
	    this.$editHtml.on( 'click', { self: this }, this._editHtml );
	    this.$form.on( 'submit', { self: this }, this._submitForm );
	    this.$form.on( 'click', '.ditty-editor-options__tag', { self: this }, this._insertTag );
	    this.$title.on( 'keyup', { self: this }, this._titleUpdate );
			this.$body.on( 'click', '.ditty-editor-options__body__error', { self: this }, this._removeErrorNotice );
			this.settings.editor.$elmt.on( 'ditty_editor_add_drafts', { self: this }, this._addDrafts );
	    this.settings.editor.$elmt.on( 'ditty_editor_save_drafts', { self: this }, this._saveDrafts );
    },
    
    /**
     * Set the css item selector
		 * @since    3.0
		 * @return   null
		*/
	  _setCssSelector: function() {
			if ( dittyVars.isTickerPost ) {
				this.itemSelector = '#poststuff .ditty-layout--' + this.layoutId;
			} else {
				this.itemSelector = '.ditty-layout--' + this.layoutId;
			}
    },
    
    /**
     * Return to the previous panel
		 * @since    3.0
		 * @return   null
		*/
	  _showPrevPanel: function() {
			this.settings.editor.$panels.ditty_slider( 'options', 'transition', 'slideRight' );
			this.settings.editor.$panels.ditty_slider( 'showSlideById', this.settings.prevPanel );
    },
    
    /**
     * Editor updated listener
		 * @since    3.0
		 * @return   null
		*/
	  _titleUpdate: function( e ) {
		  var self = e.data.self;	
			self.settings.editor.addUpdate( 'layoutUpdate', self.layoutId );
    },
    
    /**
     * Preview button add updates class
		 * @since    3.0
		 * @return   null
		*/
	  _enablePreviewButton: function() {
		  this.$preview.addClass( 'ditty-has-updates' );
    },
    
    /**
     * Preview button remove updates class
		 * @since    3.0
		 * @return   null
		*/
	  _disablePreviewButton: function() {
		  this.$preview.removeClass( 'ditty-has-updates' );
		  this.$preview.children( 'i' ).attr( 'class', this.$preview.children( 'i' ).data( 'class' ) );
    },
    
    /**
     * Editor tabs listener
		 * @since    3.0
		 * @return   null
		*/
	  _addDrafts: function( e ) {
		  var self = e.data.self;
		  self.codeEditor.codemirror.save();
		  
		  var currentData = self.$form.serialize();
		  if ( currentData !== self.initData || self.codeHasUpdates ) {
			  self.$form.trigger( 'submit' );
		  }	
    },
		
		/**
		 * Editor updated listener
		 * @since    3.0
		 * @return   null
		*/
		_saveDrafts: function( e ) {
			var self = e.data.self;
			self.codeEditor.codemirror.save();
			
			var currentData = self.$form.serialize();
			if ( currentData !== self.initData || self.codeHasUpdates ) {
				self.afterUpdateAction = 'save';
				self.$form.trigger( 'submit' );
			}	
		},
        
    /**
     * Back click
		 * @since    3.0
		 * @return   null
		*/
	  _backClick: function( e ) {
		  e.preventDefault();
		  var self = e.data.self;

		  self.codeEditor.codemirror.save();  
		  var currentData = self.$form.serialize();
		  		
		  if ( currentData !== self.initData || self.codeHasUpdates ) {
			  self.afterUpdateAction = 'return';
			  self.$form.trigger( 'submit' );
		  } else {
			  self._showPrevPanel();
		  }	
    },
    
    /**
     * Preview any changes
		 * @since    3.0
		 * @return   null
		*/
	  _previewClick: function( e ) {
		  e.preventDefault();
		  var self 	= e.data.self;

		  self.codeEditor.codemirror.save(); // Update the textarea	  
		  var currentData = self.$form.serialize();
	
		  if ( currentData !== self.initData || self.codeHasUpdates ) {  
			  self.$preview.children( 'i' ).attr( 'class', dittyVars.updateIcon );
			  self.$form.trigger( 'submit' ); 
		  }
    },
    
    /**
		 * Edit the html of the layout
		 * @since    3.0
		 * @return   null
		*/
	  _editHtml: function( e ) { 
		  e.preventDefault();
		  var self 				= e.data.self,
					panelId		= 'layout_html_editor';
			
			self.settings.editor.updateStart(); // Start the update overlay		
			self.codeEditor.codemirror.save(); // Update the textarea	  
		  var currentData = self.$form.serialize();
		  if ( currentData !== self.initData || self.codeHasUpdates ) {  
			  self.$preview.children( 'i' ).attr( 'class', dittyVars.updateIcon );
			  self.$form.trigger( 'submit' ); 
		  }
			
			// Show the panel if it exists
		  if ( self.settings.editor.panelExists( panelId ) ) {
				self.settings.editor.$elmt.find( '.ditty-editor__panel--layout_html_editor input.ditty-editor-options__title' ).val( self.$title.val() );
			  self.settings.editor.panelOptions( 'transition', 'fade' );
				self.settings.editor.showPanel( panelId );
			  
			// Else, load the new panel and show
		  } else {	
				var data = {
					action				: 'ditty_editor_layout_fields',
					layout_id			: self.layoutId,
					layout_title  : self.$title.val(),
					ditty_id			: self.editorDittyId,
					item_id				: self.editorItemId,
					item_type			: self.itemType,
					edit_type			: 'html',
					draft_values 	: self.settings.editor.getDraftValues(),
					security			: dittyVars.security
				};
				$.post( dittyVars.ajaxurl, data, function( response ) {
					if ( response ) {
						var html = '<div class="ditty-editor__panel ditty-editor__panel--' + panelId + '">' + response.form + '</div>';
						self.settings.editor.panelOptions( 'transition', 'fade' );
						self.settings.editor.showPanel( panelId, html );
					}
				}, 'json' );
			}
		}, 
		
		/**
		 * Add an error notice
		 * @since    3.0
		 * @return   null
		*/
		_showErrorNotice: function() {
			var $error = $( '<div class="ditty-editor-options__body__error"><span>' + dittyVars.strings.layout_css_error + '</span></div>' );
			this.$body.append( $error );
			
		},
		
		/**
		 * Remove the error notice
		 * @since    3.0
		 * @return   null
		*/
		_removeErrorNotice: function( e ) {
			var self = e.data.self;
			self.$body.find( '.ditty-editor-options__body__error' ).remove();
		}, 
    
    /**
		 * Submit updates
		 * @since    3.0
		 * @return   null
		*/
	  _submitForm: function( e ) {
		  e.preventDefault();
		  
		  var self 			= e.data.self,
		  		layoutId 	= self.layoutId,
		  		itemType 	= self.itemType;
		  		
		  if ( self.$form.hasClass( 'ditty-editor-has-errors' ) ) {
			  return false;
		  }

		  self.codeEditor.codemirror.save(); // Update the textarea
		  self.settings.editor.updateStart(); // Start the update overlay
		  
			var data = {
				action				: 'ditty_editor_layout_update',
				layout_id 		: layoutId,
				item_type 		: itemType,
				edit_type			: 'css',
				draft_values 	: self.settings.editor.getDraftValues(),
				security			: dittyVars.security
			};
		  self.$form.ajaxSubmit( {
		    url			: dittyVars.ajaxurl,
				type		: 'post',
				dataType: 'json',
				data		: data,
        success: function( response ) {
	        self.initData = self.$form.serialize();
	        self._disablePreviewButton();
	        if ( response.label ) {
						if ( self.$editorLayoutTitle ) {
							self.$editorLayoutTitle.html( response.label );
						}
						self.$editorLayoutVariationTitle.html( response.label );
					}	
					// Remove the template version numbers
					if ( self.$editorLayoutTitle ) {
						self.$editorLayoutTitle.find( '.ditty-layout-version' ).remove();
					}
					if ( self.$editorLayoutVariationTitle ) {
						self.$editorLayoutVariationTitle.find( '.ditty-layout-version' ).remove();
					}
					
					if ( response.code ) {
						dittyLayoutCss( response.code, self.layoutId, 'update' );
					} else {
						self._showErrorNotice();
					}
					if ( response.draft_id && response.draft_meta ) {
						dittyDraftLayoutUpdate( self, response.draft_id, null, response.draft_meta );
					}
	
					self.codeHasUpdates = false;
					self.settings.editor.updateStop(); // Stop the update overlay
					self.settings.editor.delayedSubmitDisable(); // Remove the delayed submit since we just submitted
					
					if ( 'return' === self.afterUpdateAction ) {
						self._showPrevPanel(); // Show the items list
					}
					if ( 'save' === self.afterUpdateAction ) {
						self.settings.editor.saveDitty(); // Update the ticker
					}
					self.afterUpdateAction = '';
        }
	    } ); 
    },
    
    /**
     * Initialize the editor
		 * @since    3.0
		 * @return   null
		*/
	  _initEditor: function() {
		  var self = this,
		  		codeEditorSettings = wp.codeEditor.defaultSettings ? _.clone( wp.codeEditor.defaultSettings ) : {},
					mode = dittyVars.editor.ditty_layouts_sass ? 'sass' : 'css';	
			
	    codeEditorSettings.codemirror = _.extend(
	      {},
	      codeEditorSettings.codemirror,
	      {
		      mode				: mode,
	        indentUnit	: 2,
	        tabSize			: 2
	      }
	    );
	    this.codeEditor = wp.codeEditor.initialize( this.$textarea[0], codeEditorSettings );
	    this.codeEditor.codemirror.on( 'change', function() {
		    self.codeEditor.codemirror.save();
		    self.settings.editor.addUpdate( 'layoutCssUpdate', self.layoutId );
				self.codeHasUpdates = true;
				self._enablePreviewButton();
				self.settings.editor.delayedSubmitEnable(); // Enable the delayed submit since we have changes
			} );
    },

    /**
     * Insert a tag
		 * @since    3.0
		 * @return   null
		*/
	  _insertTag: function( e ) {
		  var self 		= e.data.self,
		  		$tag		= $( e.target ),
		  		text		= $tag.text(),
		  		cursor 	= self.codeEditor.codemirror.getCursor();
					
			self.codeEditor.codemirror.replaceRange( text, cursor );
			
			// Move the cursor position
			cursor.ch = cursor.ch + text.length;
			self.codeEditor.codemirror.setCursor( cursor );
			//self.codeEditor.codemirror.trigger( 'focus' );
    },

	  /**
		 * Return a specific setting
		 * @since    3.0
		 * @return   null
		*/
    _options: function ( key ) {
	    return this.settings[key];
    },
    
		/**
		 * Setup triggers
		 * @since  	3.0
		 * @return 	null
		*/
    trigger: function ( fn, customParams ) {
	    var params = [this.settings]; 
	    if ( customParams ) {
		    params = customParams;
	    }

	    this.$elmt.trigger( 'ditty_layout_css_editor_panel_' + fn, params );
	
	    if ( typeof this.settings[fn] === 'function' ) {
	      this.settings[fn].apply( this.$elmt, params );
	    }
    },
		
		/**
		 * Allow settings to be modified
		 * @since  	3.0
		 * @return 	null
		*/
    options: function ( key, value ) {
	    if ( typeof key === 'object' ) {
	      this.settings = $.extend( {}, defaults, $.ditty_layout_css_editor_panel.defaults, key );
	    } else if ( typeof key === 'string' ) {
        if ( value === undefined ) {
	        return this.settings[key];
        }
        this.settings[key] = value;
	    } else {
        return this.settings;
	    }
	    this.trigger( 'options_update' );
    },

		/**
		 * Destroy the class
		 * @since  	3.0
		 * @return 	null
		*/
    destroy: function () {
	    
	    // Remove actions
	    this.$back.off( 'click', { self: this }, this._backClick );
	    this.$preview.off( 'click', { self: this }, this._previewClick );
	    this.$editHtml.off( 'click', { self: this }, this._editHtml );
	    this.$form.off( 'submit', { self: this }, this._submitForm );
	    this.$form.off( 'click', '.ditty-editor-options__tag', { self: this }, this._insertTag );
	    this.$title.off( 'keyup', { self: this }, this._titleUpdate );
			this.$body.off( 'click', '.ditty-editor-options__body__error', { self: this }, this._removeErrorNotice );
			this.settings.editor.$elmt.off( 'ditty_editor_add_drafts', { self: this }, this._addDrafts );
	    this.settings.editor.$elmt.off( 'ditty_editor_save_drafts', { self: this }, this._saveDrafts );
			this.codeEditor.codemirror.off( 'change' );
	    this.codeEditor.codemirror.toTextArea();
	    
	    this.elmt._ditty_layout_css_editor_panel = null;	    
    }
  };

	/**
	 * Create the data list
	 * @since  	3.0
	 * @return 	null
	*/
  $.fn.ditty_layout_css_editor_panel = function( options ) {
    var args = arguments,
        error = false,
        returns;

    if ( options === undefined || typeof options === 'object' ) {
      return this.each( function () {
        if ( ! this._ditty_layout_css_editor_panel ) {
        	this._ditty_layout_css_editor_panel = new Ditty_Layout_Css_Editor_Panel( this, options );
        }
      });
    } else if ( typeof options === 'string' ) {
      this.each( function () {
        var instance = this._ditty_layout_css_editor_panel;

        if ( ! instance ) {
          throw new Error( 'No Ditty_Layout_Css_Editor_Panel applied to this element.' );
        }
        if ( typeof instance[options] === 'function' && options[0] !== '_' ) {
          returns = instance[options].apply( instance, [].slice.call( args, 1 ) );
        } else {
          error = true;
        }
      } );

      if ( error ) {
        throw new Error( 'No method "' + options + '" in Ditty_Layout_Css_Editor_Panel.' );
      }

      return returns !== undefined ? returns : this;
    }
  };

  $.ditty_layout_css_editor_panel = {};
  $.ditty_layout_css_editor_panel.defaults = defaults;

} )( jQuery );


/* global dittyVars:true */

jQuery( function( $ ) {
	
	// Setup strict mode
	(function() {

    "use strict";
		
		function modifyItemsPerPage( $perPage, pagingValue ) {
			if ( 0 === parseInt( pagingValue ) ) {
				$perPage.hide();
			} else {
				$perPage.show();
			}
		}
		
		function modifyArrows( arrowSiblings, arrowsValue ) {
			if ( 'none' === arrowsValue ) {
				arrowSiblings.hide();
			} else {
				arrowSiblings.show();
			}
		}
		
		function modifyBullets( bulletSiblings, bulletsValue ) {
			if ( 'none' === bulletsValue ) {
				bulletSiblings.hide();
			} else {
				bulletSiblings.show();
			}
		}

		$( '#ditty-editor' ).on( 'ditty_display_editor_panel_init', '.ditty-editor__panel--displayEditor', function( e, editorPanel ) {  
			if ( 'list' === editorPanel.displayType ) {
				var $form = editorPanel.$form,
						$perPage = $form.find( '.ditty-field--perPage' ),
						arrowSiblings = $form.find( '.ditty-field--arrows' ).siblings(),
						bulletSiblings = $form.find( '.ditty-field--bullets' ).siblings();
				
				// Set paging
				modifyItemsPerPage( $perPage, $form.find( 'input[name="paging"]:checked' ).val() );
				$form.find( 'input[name="paging"]' ).on( 'change', function() {
					modifyItemsPerPage( $perPage, $( this ).val() );
				} );
				
				// Set arrows
				modifyArrows( arrowSiblings, $form.find( 'select[name="arrows"]' ).val() );
				$form.find( 'select[name="arrows"]' ).on( 'change', function() {
					modifyArrows( arrowSiblings, $( this ).val() );
				} );
				
				// Set bullets
				modifyBullets( bulletSiblings, $form.find( 'select[name="bullets"]' ).val() );
				$form.find( 'select[name="bullets"]' ).on( 'change', function() {
					modifyBullets( bulletSiblings, $( this ).val() );
				} );
			}
		} );   

	}() );
	
} );

/* global dittyVars:true */

jQuery( function( $ ) {
	
	// Setup strict mode
	(function() {

    "use strict";

		function modifyHeights( $minHeight, $maxHeight, directionValue ) {
			if ( 'down' === directionValue || 'up' === directionValue ) {
				$minHeight.show();
				$maxHeight.show();
			} else {
				$minHeight.hide();
				$maxHeight.hide();
			}
		}

		$( '#ditty-editor' ).on( 'ditty_display_editor_panel_init', '.ditty-editor__panel--displayEditor', function( e, editorPanel ) {  
			if ( 'ticker' === editorPanel.displayType ) {
				var $form = editorPanel.$form,
						$minHeight = $form.find( '.ditty-field--minHeight' ),
						$maxHeight = $form.find( '.ditty-field--maxHeight' );
				
				// Set heights
				modifyHeights( $minHeight, $maxHeight, $form.find( 'input[name="direction"]:checked' ).val() );
				$form.find( 'input[name="direction"]' ).on( 'change', function() {
					modifyHeights( $minHeight, $maxHeight, $( this ).val() );
				} );
			}
		} );   

	}() );
	
} );

jQuery( function( $ ) {
	
	// Setup strict mode
	(function() {

    "use strict";
		
		function toggle_content_fields( $form ) {
			var val = $form.find( 'input[name="content_display"]:checked' ).val();
			if ( 'full' === val  ) {
				$form.find( '.ditty-field--more_link' ).hide();
				$form.find( '.ditty-field--excerpt_length' ).hide();
				$form.find( '.ditty-field--more' ).hide();
				$form.find( '.ditty-field--more_before' ).hide();
				$form.find( '.ditty-field--more_after' ).hide();
			} else {
				$form.find( '.ditty-field--more_link' ).show();
				$form.find( '.ditty-field--excerpt_length' ).show();
				$form.find( '.ditty-field--more' ).show();
				$form.find( '.ditty-field--more_before' ).show();
				$form.find( '.ditty-field--more_after' ).show();
			}
		}
		
		$( '#ditty-editor' ).on( 'ditty_item_editor_panel_init', '.ditty-editor__panel--item_editor', function( e, editorPanel ) {  
			if ( 'posts_feed' !== editorPanel.itemType && 'post' !== editorPanel.itemType ) {
				return false;
			}
			var $form = editorPanel.$form;
			toggle_content_fields( $form );
			$form.on( 'click', 'input[name="content_display"]', function() {
				toggle_content_fields( $form );
			} );
		} );

	}() );
	
} );