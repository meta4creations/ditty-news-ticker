/* global jQuery:true */
/* //global dittyVars:true */
/* //global console:true */

// @codekit-append 'fields/clone.js
// @codekit-append 'fields/code.js
// @codekit-append 'fields/color.js
// @codekit-append 'fields/date.js
// @codekit-append 'fields/file.js
// @codekit-append 'fields/image.js
// @codekit-append 'fields/slider.js
// @codekit-append 'fields/wysiwyg.js
// @codekit-append 'fields/group.js

jQuery( function( $ ) {
	
	// Setup strict mode
	(function() {

    "use strict";
    
		function setup( $field ) {

			// Setup protip
			$.protip( {
				defaults: {
					position: 'top',
					size: 'small',
					scheme: 'black',
					classes: 'ditty-protip'
				}
			} );
			
			var $inputContainer = $field.children( '.ditty-field__input__container' );
			
			$field.addClass( 'ditty-field--clone-enabled--init' );
			$field.data( 'input_count', $inputContainer.children( '.ditty-field__input' ).length );

			$inputContainer.children( '.ditty-field__input' ).each( function() {
				setupButtons( $field, $( this ) );
			} );		
			
			$field.find( '.ditty-field__actions__clone' ).on( 'click', function( e ) {
				e.preventDefault();
				var $input = $inputContainer.children( '.ditty-field__input' ).last();
				addInput( $field, $input );
			} );
			
			$inputContainer.sortable( {
				handle: '.ditty-field__input__action--arrange',
				items: '> .ditty-field__input',
				axis: 'y',
				start: function( event, ui ) {
					var $item = $( ui.item );
					$item.addClass( 'ditty-field__input--moving' );
				},
				stop: function( event, ui ) {
					var $item = $( ui.item );
					$item.removeClass( 'ditty-field__input--moving' );
				},
				update: function() {
					updateField( $field );
				}
			} );
		}
		
		/**
		 * Update the field class and input names
		 *
		 * @since    3.0
		 * @return   null
		*/
		function updateField( $field ) {
			var $inputContainer 	= $field.children( '.ditty-field__input__container' ),
					cloneName 				= $field.data( 'clone_name' ),
					cloneMax 					= $field.data( 'clone_max' ),
					fieldData					= [];
			
			$inputContainer.children( '.ditty-field__input' ).each( function( index ) {
				var $input = $( this );
		    $input.find( ':input' ).each( function() {
			    var baseId = $( this ).parents( '.ditty-field__input' ).data( 'baseid' ),
							fieldName;
			    
					if ( baseId ) {
						fieldName = cloneName + '[' + index + '][' + baseId + ']';
				    //$( this ).attr( 'name', cloneName + '[' + index + '][' + baseId + ']' );
			    } else {
						fieldName = cloneName + '[' + index + ']';
				    //$( this ).attr( 'name', cloneName + '[' + index + ']' );
			    }
					$( this ).attr( 'name', fieldName );
					fieldData.push( {
						name	: fieldName,
						value	: $(this).val()
					} );
		    } );
	    } );
	    $field.data( 'input_count', $inputContainer.children( '.ditty-field__input' ).length );
	    
	    if ( cloneMax > 0 && $inputContainer.children( '.ditty-field__input' ).length >= cloneMax ) {
				$field.addClass( 'ditty-field--clone-enabled--max' );
			} else {
				$field.removeClass( 'ditty-field--clone-enabled--max' );
			}
			
			$field.trigger( 'ditty_field_update' );
			$field.trigger( 'ditty_field_clone_update', [fieldData, cloneName] );
    }
    
    /**
		 * Add a new clone input
		 *
		 * @since    3.0
		 * @return   null
		*/
    function addInput( $field, $input, cloneField ) { 	    		
			cloneField = cloneField ? cloneField : $field.data( 'clone_field' );
	    
	    var $clone = $( cloneField );
	    
	    $input.after( $clone );
	    
			updateField( $field );
			setupButtons( $field, $clone );

			$field.trigger( 'ditty_init_fields' );
    }
    
    /**
		 * Setup clone buttons
		 *
		 * @since    3.0
		 * @return   null
		*/
    function setupButtons( $field, $input ) {     
	    var $remove 		= $input.find( '.ditty-field__input__action--remove' ),
	    		$add 				= $input.find( '.ditty-field__input__action--add' ),
	    		$clone 			= $input.find( '.ditty-field__input__action--clone' );

			$remove.on( 'click', function( e ) {
				e.preventDefault();
				$( this ).protipHide();
				if ( 1 === $input.siblings().length ) {
					addInput( $field, $input );
				}
				$input.remove();
				updateField( $field );
				//$( 'body' ).trigger( 'ditty_enable_settings_update' );
			} );
			
			$add.on( 'click', function( e ) {
				e.preventDefault();
				addInput( $field, $input );
				//$( 'body' ).trigger( 'ditty_enable_settings_update' );
			} );
			
			$clone.on( 'click', function( e ) {
				e.preventDefault();
				addInput( $field, $input, $input.clone() );
				//$( 'body' ).trigger( 'ditty_enable_settings_update' );
			} );
    }

    function init( e ) {
			$( e.target ).find( '.ditty-field--clone-enabled:not(.ditty-field--clone-enabled--init)' ).each( function() {
				setup( $( this ) );
			} );
		}
    $( document ).on( 'ditty_init_fields', init );

	}() );
	
} );

/* global _:true */

jQuery( function( $ ) {
	
	// Setup strict mode
	(function() {

    "use strict";

		function setup( $field ) {
			$field.addClass( 'ditty-input--code--init' );
			
			var $textarea = $field.find( 'textarea' ),
					codeEditor = null,
					codeEditorSettings = wp.codeEditor.defaultSettings ? _.clone( wp.codeEditor.defaultSettings ) : {};
					
	    codeEditorSettings.codemirror = _.extend(
	      {},
	      codeEditorSettings.codemirror,
	      {
		      mode				: $textarea.data( 'mode' ) ? $textarea.data( 'mode' ) : null,
	        indentUnit	: 2,
	        tabSize			: 2
	      }
	    );
	    codeEditor = wp.codeEditor.initialize( $textarea[0], codeEditorSettings );
		}

    function init( e ) {
			$( e.target ).find( '.ditty-input--code:not(.ditty-input--code--init)' ).each( function() {
				setup( $( this ) );
			} );
		}
    $( document ).on( 'ditty_init_fields', init );

	}() );
	
} );

jQuery( function( $ ) {
	
	// Setup strict mode
	(function() {

    "use strict";

		function setup( $field ) {
			$field.addClass( 'ditty-input--color--init' );
			$field.find( 'input[type="text"]' ).minicolors( {
				format: 'rgb',
				opacity: true
			} );
		}

    function init( e ) {
	    $( e.target ).find( '.ditty-input--color:not(.ditty-input--color--init)' ).each( function() {
				setup( $( this ) );
			} );
		}
    $( document ).on( 'ditty_init_fields', init );

	}() );
	
} );

jQuery( function( $ ) {
	
	// Setup strict mode
	(function() {

    "use strict";

		function setup( $field ) {
			var format = $field.find( 'input[type="text"]' ).data( 'dateformat' );
			$field.find( 'input[type="text"]' ).datepicker( {
				dateFormat: format
			} );
		}

    function init( e ) {
			$( e.target ).find( '.ditty-input--date' ).each( function() {
				setup( $( this ) );
			} );
		}
    $( document ).on( 'ditty_init_fields', init );

	}() );
	
} );

jQuery( function( $ ) {
	
	// Setup strict mode
	(function() {

    "use strict";

		function setup( $field ) {
			$field.addClass( 'ditty-input--file--init' );
			
			var $input = $field.find( 'input[type="text"]' ),
					uploader;
			
			$field.on( 'click', '.ditty-input--file__upload', function( e ) {
				e.preventDefault();
				if ( undefined === uploader ) {
					uploader = wp.media( {
						title: $input.data( 'media_title' ),
						button: { text: $input.data( 'media_button' ), size: 'small' },
						multiple: $input.data( 'multiple' ),
						library : {
							type : $input.data( 'file_types' ),
						}
					} );
				}

				uploader.on( 'open', function() {
					var selection = uploader.state().get( 'selection' );
					var attachment = wp.media.attachment( $input.val() );
					if ( attachment ) {
						selection.add( attachment );
					}
					// let ids = [13, 14, 56];
					// ids.forEach(function(id) {
					// 	let attachment = wp.media.attachment(id);
					// 	selection.add(attachment ? [attachment] : []);
					// } );
				} );
				
				uploader.on( 'select', function() {
					var attachments = uploader.state().get( 'selection' ).toJSON(),
							file_data = [];
							
					if ( attachments.length > 0 ) {
						$(attachments).each( function() {	
							file_data.push( {
								id 					: $(this)[0].id,
								title				: $(this)[0].title,
								caption			: $(this)[0].caption,
								description	: $(this)[0].description,
								link				: $(this)[0].link,
								url					: $(this)[0].url
							} );
						} );
					}

					$input.val( file_data[0].url );

					$field.trigger( 'ditty_field_file_select', [$field, file_data] );
					$field.trigger( 'ditty_field_update' );
				} );
				
				uploader.open();
				return false;
				
			} );
			
		}

    function init( e ) {
			$( e.target ).find( '.ditty-input--file:not(.ditty-input--file--init)' ).each( function() {
				setup( $( this ) );
			} );
		}
    $( document ).on( 'ditty_init_fields', init );

	}() );
	
} );

jQuery( function( $ ) {
	
	// Setup strict mode
	(function() {

    "use strict";

		function setup( $field ) {
			$field.addClass( 'ditty-input--image--init' );
			
			var $input = $field.find( 'input[type="hidden"]' ),
					$preview = $field.find( '.ditty-input--image__preview' ),
					$preview_img = $preview.children( 'img' ),
					uploader;
			
			$field.on( 'click', '.ditty-input--image__upload', function( e ) {
				e.preventDefault();

				if ( undefined === uploader ) {
					uploader = wp.media({
						title: $input.data( 'media_title' ),
						button: { text: $input.data( 'media_button' ), size: 'small' },
						multiple: $input.data( 'multiple' ),
						library : {
							type : 'image'
						}
					} );
				}

				uploader.on( 'open', function() {
					var selection = uploader.state().get( 'selection' );
					var attachment = wp.media.attachment( $input.val() );
					if ( attachment ) {
						selection.add( attachment );
					}
					// let ids = [13, 14, 56];
					// ids.forEach(function(id) {
					// 	let attachment = wp.media.attachment(id);
					// 	selection.add(attachment ? [attachment] : []);
					// } );
				} );
				
				uploader.on( 'select', function() {
					var attachments = uploader.state().get( 'selection' ).toJSON(),
							image_data = [];
							
					if ( attachments.length > 0 ) {
						$(attachments).each( function() {	
							image_data.push( {
								id 					: $(this)[0].id,
								title				: $(this)[0].title,
								caption			: $(this)[0].caption,
								description	: $(this)[0].description,
								link				: $(this)[0].link,
								url					: $(this)[0].sizes.medium ? $(this)[0].sizes.medium.url : $(this)[0].sizes.full.url
							} );
						} );
					}
					
					$input.val( image_data[0].id );
					if ( $preview_img.length ) {
						$preview_img.remove();
					}
					$preview_img = $( '<img src="' + image_data[0].url + '" alt="" />' );
					$preview.prepend( $preview_img );
					$preview.find( 'i' ).remove();
					
					$field.trigger( 'ditty_field_image_select', [$field, image_data] );
					$field.trigger( 'ditty_field_update' );
				} );
				
				uploader.open();
				return false;
				
			} );
			
		}

    function init( e ) {
			$( e.target ).find( '.ditty-input--image:not(.ditty-input--image--init)' ).each( function() {
				setup( $( this ) );
			} );
		}
    $( document ).on( 'ditty_init_fields', init );

	}() );
	
} );

jQuery( function( $ ) {
	
	// Setup strict mode
	(function() {

    "use strict";

		function setup( $field ) {
			$field.addClass( 'ditty-input--slider--init' );
			$field.find( 'input[type="text"]' ).ionRangeSlider();
		}

    function init( e ) {
			$( e.target ).find( '.ditty-input--slider:not(.ditty-input--slider--init)' ).each( function() {
				setup( $( this ) );
			} );
		}
    $( document ).on( 'ditty_init_fields', init );

	}() );
	
} );

/* global tinyMCEPreInit:true */
/* global tinymce:true */
/* global quicktags:true */
/* global QTags:true */
/* global wp:true */

jQuery( function( $ ) {
	
	// Setup strict mode
	(function() {

    "use strict";
    
    /**
		 * Transform textarea into wysiwyg editor.
		 */
		function transform( $field ) {

			$field.addClass( 'ditty-input--wysiwyg--init' );
			if ( $field.hasClass( 'ditty-input--clone--clone' ) ) {
				var ranId = Math.floor( ( Math.random() * 100000000 ) + 1 );
				$field.find( 'textarea' ).attr( 'id', 'ditty-input--' + ranId );
			}
			
			var $wrapper = $field.find( '.wp-editor-wrap' ),
					id = $field.find( 'textarea' ).attr( 'id' ),
					editor;
					
			// Ignore existing editor.
			if ( tinyMCEPreInit.mceInit[id] ) {
				editor = tinymce.get( id );
				editor.on( 'keyup change', function() {
					tinymce.triggerSave();
					$field.trigger( 'ditty_input_wysiwyg_update' );
				} );
				return;
			}
	
			var originalId = getOriginalId( $field ),
					settings = getEditorSettings( originalId );

			updateDom( $wrapper, id );

			// TinyMCE
			if ( window.tinymce ) {
				tinymce.execCommand( 'mceRemoveEditor', true, id );
				editor = new tinymce.Editor( id, settings.tinymce, tinymce.EditorManager );
				editor.render();
				editor.on( 'keyup change', function() {
					tinymce.triggerSave();
					$field.trigger( 'ditty_input_wysiwyg_update' );
				} );
			}
	
			// Quick tags
			if ( window.quicktags ) {
				settings.quicktags.id = id;
				quicktags( settings.quicktags );
				QTags._buttonsInit();
			}
		}
		
		function getOriginalId( $clone ) {
			var $original = $clone.siblings( '.ditty-input--wysiwyg.ditty-input--clone--orig' ),
					origingalID = $original.find( 'textarea' ).attr( 'id' );

			if ( /_\d+$/.test( origingalID ) ) {
				origingalID = origingalID.replace( /_\d+$/, '' );
			}
			if ( tinyMCEPreInit.mceInit.hasOwnProperty( origingalID ) || tinyMCEPreInit.qtInit.hasOwnProperty( origingalID ) ) {
				return origingalID;
			}
			return '';
		}

		function updateDom( $wrapper, id ) {
			// Wrapper div and media buttons
			$wrapper.attr( 'id', 'wp-' + id + '-wrap' )
			        .find( '.mce-container' ).remove().end()               // Remove rendered tinyMCE editor
			        .find( '.wp-editor-tools' ).attr( 'id', 'wp-' + id + '-editor-tools' )
			        .find( '.wp-media-buttons' ).attr( 'id', 'wp-' + id + '-media-buttons' )
			        .find( 'button' ).data( 'editor', id ).attr( 'data-editor', id );
	
			// Set default active mode.
			$wrapper.removeClass( 'html-active tmce-active' );
			$wrapper.addClass( window.tinymce ? 'tmce-active' : 'html-active' );
	
			// Editor tabs
			$wrapper.find( '.switch-tmce' )
			        .attr( 'id', id + 'tmce' )
			        .data( 'wp-editor-id', id ).attr( 'data-wp-editor-id', id ).end()
			        .find( '.switch-html' )
			        .attr( 'id', id + 'html' )
			        .data( 'wp-editor-id', id ).attr( 'data-wp-editor-id', id );
	
			// Quick tags
			$wrapper.find( '.wp-editor-container' ).attr( 'id', 'wp-' + id + '-editor-container' )
			        .find( '.quicktags-toolbar' ).attr( 'id', 'qt_' + id + '_toolbar' ).html( '' );
		}
		
		function getEditorSettings( id ) {		
			var settings = getDefaultEditorSettings();
			if ( id && tinyMCEPreInit.mceInit.hasOwnProperty( id ) ) {
				settings.tinymce = tinyMCEPreInit.mceInit[id];
			}
			if ( id && window.quicktags && tinyMCEPreInit.qtInit.hasOwnProperty( id ) ) {
				settings.quicktags = tinyMCEPreInit.qtInit[id];
			}
			return settings;
		}

		function getDefaultEditorSettings() {
			var settings = wp.editor.getDefaultSettings();	
			settings.tinymce.toolbar1 = 'formatselect,bold,italic,bullist,numlist,blockquote,alignleft,aligncenter,alignright,link,unlink,wp_more,spellchecker,fullscreen,wp_adv';
			settings.tinymce.toolbar2 = 'strikethrough,hr,forecolor,pastetext,removeformat,charmap,outdent,indent,undo,redo,wp_help';
			settings.quicktags.buttons = 'strong,em,link,block,del,ins,img,ul,ol,li,code,more,close';	
			return settings;
		}
		
		function pre_save( e ) {
			if ( window.tinymce && $( e.target ).find( '.ditty-input--wysiwyg--init .wp-editor-area' ).length ) {
				tinymce.triggerSave();
			}
		}
    $( document ).on( 'ditty_pre_save_fields', pre_save );
    
    function init( e ) {
			$( e.target ).find( '.ditty-input--wysiwyg:not(.ditty-input--wysiwyg--init)' ).each( function() {
				transform( $( this ) );
			} );
		}
    $( document ).on( 'ditty_init_fields', init );

	}() );
	
} );

jQuery( function( $ ) {
	
	// Setup strict mode
	(function() {

    "use strict";

		function setup( $field ) {
			$field.addClass( 'ditty-field-type--group--init' );
			
			var $input = $field.children( '.ditty-field__input__container' ).children( '.ditty-input--group' ),
					height = 0;
					
			if ( 'collapsed' === $field.attr( 'data-collapsible' ) ) {
				$input.hide();
			}

			$field.on( 'click', '.ditty-field__collapsible-toggle', function( e ) {
				e.preventDefault();
				if ( 'expanded' === $( this ).parents( '.ditty-field-type--group' ).attr( 'data-collapsible' ) ) {
					$( this ).parents( '.ditty-field-type--group' ).attr( 'data-collapsible', 'collapsed' );
					height = $input.outerHeight();
					$input.stop().animate( {
						marginTop: '-' + height + 'px'
					}, 1000, 'easeInOutQuint', function() {
							$input.hide();
					} );
				} else {
					$( this ).parents( '.ditty-field-type--group' ).attr( 'data-collapsible', 'expanded' );
					height = $input.outerHeight();
					$input.stop().css( 'marginTop', '-' + height + 'px' );
					$input.show();
					$input.stop().animate( {
						marginTop: 0
					}, 1000, 'easeInOutQuint', function() {
					} );
				}
			} );
		}

    function init( e ) {
	    $( e.target ).find( '.ditty-field-type--group[data-collapsible]:not(.ditty-field-type--group--init)' ).each( function() {
				setup( $( this ) );
			} );
		}
    $( document ).on( 'ditty_init_fields', init );

	}() );
	
} );